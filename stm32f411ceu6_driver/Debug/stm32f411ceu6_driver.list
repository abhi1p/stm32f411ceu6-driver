
stm32f411ceu6_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014c0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08001658  08001658  00011658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016dc  080016dc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080016dc  080016dc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016dc  080016dc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016dc  080016dc  000116dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016e0  080016e0  000116e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080016e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  08001748  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001748  00020094  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019e6  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006b4  00000000  00000000  00021a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00022128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  00022320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033ef  00000000  00000000  000224d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002381  00000000  00000000  000258c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b039  00000000  00000000  00027c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00032c81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d98  00000000  00000000  00032cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001640 	.word	0x08001640

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	08001640 	.word	0x08001640

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <SPI2_GPIO_INIT>:
 *Alternate Functionality	-	5
 *
 */

void SPI2_GPIO_INIT()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t spi;
	spi.pGPIOx = GPIOB;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <SPI2_GPIO_INIT+0x40>)
 80001f0:	607b      	str	r3, [r7, #4]
	spi.GPIO_PinConfig.GPIO_PinOpType = GPIO_OUT_TYPE_PP;
 80001f2:	2300      	movs	r3, #0
 80001f4:	733b      	strb	r3, [r7, #12]
	spi.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001f6:	2302      	movs	r3, #2
 80001f8:	727b      	strb	r3, [r7, #9]
	spi.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 80001fa:	2300      	movs	r3, #0
 80001fc:	72fb      	strb	r3, [r7, #11]
	spi.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001fe:	2302      	movs	r3, #2
 8000200:	72bb      	strb	r3, [r7, #10]
	spi.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PIN_AF5;
 8000202:	2305      	movs	r3, #5
 8000204:	737b      	strb	r3, [r7, #13]
//	//NSS
//	spi.GPIO_PinConfig.GPIO_PinNo=GPIO_PIN9;
//	GPIO_Init(&spi);

//SCLK
	spi.GPIO_PinConfig.GPIO_PinNo = GPIO_PIN10;
 8000206:	230a      	movs	r3, #10
 8000208:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&spi);
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4618      	mov	r0, r3
 800020e:	f000 fb4f 	bl	80008b0 <GPIO_Init>
//	//MISO
//	spi.GPIO_PinConfig.GPIO_PinNo=GPIO_PIN14;
//	GPIO_Init(&spi);

//MOSI
	spi.GPIO_PinConfig.GPIO_PinNo = GPIO_PIN15;
 8000212:	230f      	movs	r3, #15
 8000214:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&spi);
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fb49 	bl	80008b0 <GPIO_Init>

}
 800021e:	bf00      	nop
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	40020400 	.word	0x40020400

0800022c <SPI2_INIT>:

void SPI2_INIT()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
	SPI_Handle_t spi2;
	spi2.pSPIx = SPI2;
 8000232:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <SPI2_INIT+0x38>)
 8000234:	607b      	str	r3, [r7, #4]
	spi2.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000236:	2300      	movs	r3, #0
 8000238:	727b      	strb	r3, [r7, #9]
	spi2.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800023a:	2301      	movs	r3, #1
 800023c:	723b      	strb	r3, [r7, #8]
	spi2.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800023e:	2300      	movs	r3, #0
 8000240:	72fb      	strb	r3, [r7, #11]
	spi2.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 8000242:	2300      	movs	r3, #0
 8000244:	72bb      	strb	r3, [r7, #10]
	spi2.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000246:	2300      	movs	r3, #0
 8000248:	737b      	strb	r3, [r7, #13]
	spi2.SPIConfig.SPI_CPOL = SPI_CPOL_HIGH;
 800024a:	2301      	movs	r3, #1
 800024c:	733b      	strb	r3, [r7, #12]
	spi2.SPIConfig.SPI_SSM = SPI_SSM_EN; //enable software slave management
 800024e:	2301      	movs	r3, #1
 8000250:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&spi2);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f9b7 	bl	80005c8 <SPI_Init>
}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40003800 	.word	0x40003800

08000268 <main>:
int main()
{
 8000268:	b590      	push	{r4, r7, lr}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
	SPI2_GPIO_INIT();	//Initialize the GPIO pin to behave as SPI2
 800026e:	f7ff ffbb 	bl	80001e8 <SPI2_GPIO_INIT>

	SPI2_INIT(); //Initialize the SPI2 peripheral
 8000272:	f7ff ffdb 	bl	800022c <SPI2_INIT>

	SPI_SSI_Config(SPI2, ENABLE); //this is makes SSI bit internally high to avoid MODF fault
 8000276:	2101      	movs	r1, #1
 8000278:	4814      	ldr	r0, [pc, #80]	; (80002cc <main+0x64>)
 800027a:	f000 fa60 	bl	800073e <SPI_SSI_Config>

	SPI_PeriControl(SPI2, ENABLE);
 800027e:	2101      	movs	r1, #1
 8000280:	4812      	ldr	r0, [pc, #72]	; (80002cc <main+0x64>)
 8000282:	f000 fa44 	bl	800070e <SPI_PeriControl>
	printf("Start transmit\n");
 8000286:	4812      	ldr	r0, [pc, #72]	; (80002d0 <main+0x68>)
 8000288:	f000 fd50 	bl	8000d2c <puts>
	char data[] = "Hello Abhishek";
 800028c:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <main+0x6c>)
 800028e:	463c      	mov	r4, r7
 8000290:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000292:	c407      	stmia	r4!, {r0, r1, r2}
 8000294:	8023      	strh	r3, [r4, #0]
 8000296:	3402      	adds	r4, #2
 8000298:	0c1b      	lsrs	r3, r3, #16
 800029a:	7023      	strb	r3, [r4, #0]

	SPI_SendData(SPI2, (uint8_t*) data, strlen(data));
 800029c:	463b      	mov	r3, r7
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ff9a 	bl	80001d8 <strlen>
 80002a4:	4602      	mov	r2, r0
 80002a6:	463b      	mov	r3, r7
 80002a8:	4619      	mov	r1, r3
 80002aa:	4808      	ldr	r0, [pc, #32]	; (80002cc <main+0x64>)
 80002ac:	f000 f9fb 	bl	80006a6 <SPI_SendData>

	while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 80002b0:	bf00      	nop
 80002b2:	2180      	movs	r1, #128	; 0x80
 80002b4:	4805      	ldr	r0, [pc, #20]	; (80002cc <main+0x64>)
 80002b6:	f000 f9e2 	bl	800067e <SPI_GetFlagStatus>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d1f8      	bne.n	80002b2 <main+0x4a>
	SPI_PeriControl(SPI2, DISABLE);
 80002c0:	2100      	movs	r1, #0
 80002c2:	4802      	ldr	r0, [pc, #8]	; (80002cc <main+0x64>)
 80002c4:	f000 fa23 	bl	800070e <SPI_PeriControl>
	while (1)
 80002c8:	e7fe      	b.n	80002c8 <main+0x60>
 80002ca:	bf00      	nop
 80002cc:	40003800 	.word	0x40003800
 80002d0:	08001658 	.word	0x08001658
 80002d4:	08001668 	.word	0x08001668

080002d8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <ITM_SendChar+0x44>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a0d      	ldr	r2, [pc, #52]	; (800031c <ITM_SendChar+0x44>)
 80002e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002ec:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <ITM_SendChar+0x48>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <ITM_SendChar+0x48>)
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80002fa:	bf00      	nop
 80002fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0f8      	beq.n	80002fc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800030a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	6013      	str	r3, [r2, #0]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	e000edfc 	.word	0xe000edfc
 8000320:	e0000e00 	.word	0xe0000e00

08000324 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]
 8000334:	e00a      	b.n	800034c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000336:	f3af 8000 	nop.w
 800033a:	4601      	mov	r1, r0
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	1c5a      	adds	r2, r3, #1
 8000340:	60ba      	str	r2, [r7, #8]
 8000342:	b2ca      	uxtb	r2, r1
 8000344:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	3301      	adds	r3, #1
 800034a:	617b      	str	r3, [r7, #20]
 800034c:	697a      	ldr	r2, [r7, #20]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	429a      	cmp	r2, r3
 8000352:	dbf0      	blt.n	8000336 <_read+0x12>
	}

return len;
 8000354:	687b      	ldr	r3, [r7, #4]
}
 8000356:	4618      	mov	r0, r3
 8000358:	3718      	adds	r7, #24
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800035e:	b580      	push	{r7, lr}
 8000360:	b086      	sub	sp, #24
 8000362:	af00      	add	r7, sp, #0
 8000364:	60f8      	str	r0, [r7, #12]
 8000366:	60b9      	str	r1, [r7, #8]
 8000368:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800036a:	2300      	movs	r3, #0
 800036c:	617b      	str	r3, [r7, #20]
 800036e:	e009      	b.n	8000384 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	1c5a      	adds	r2, r3, #1
 8000374:	60ba      	str	r2, [r7, #8]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ffad 	bl	80002d8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	3301      	adds	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	429a      	cmp	r2, r3
 800038a:	dbf1      	blt.n	8000370 <_write+0x12>
	}
	return len;
 800038c:	687b      	ldr	r3, [r7, #4]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <_close>:

int _close(int file)
{
 8000396:	b480      	push	{r7}
 8000398:	b083      	sub	sp, #12
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
	return -1;
 800039e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003bc:	605a      	str	r2, [r3, #4]
	return 0;
 80003be:	2300      	movs	r3, #0
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr

080003ca <_isatty>:

int _isatty(int file)
{
 80003ca:	b480      	push	{r7}
 80003cc:	b083      	sub	sp, #12
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
	return 1;
 80003d2:	2301      	movs	r3, #1
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr

080003de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003de:	b480      	push	{r7}
 80003e0:	b085      	sub	sp, #20
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	60f8      	str	r0, [r7, #12]
 80003e6:	60b9      	str	r1, [r7, #8]
 80003e8:	607a      	str	r2, [r7, #4]
	return 0;
 80003ea:	2300      	movs	r3, #0
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3714      	adds	r7, #20
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr
	...

080003f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000400:	4a14      	ldr	r2, [pc, #80]	; (8000454 <_sbrk+0x5c>)
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <_sbrk+0x60>)
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <_sbrk+0x64>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d102      	bne.n	800041a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <_sbrk+0x64>)
 8000416:	4a12      	ldr	r2, [pc, #72]	; (8000460 <_sbrk+0x68>)
 8000418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <_sbrk+0x64>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4413      	add	r3, r2
 8000422:	693a      	ldr	r2, [r7, #16]
 8000424:	429a      	cmp	r2, r3
 8000426:	d207      	bcs.n	8000438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000428:	f000 fbe0 	bl	8000bec <__errno>
 800042c:	4603      	mov	r3, r0
 800042e:	220c      	movs	r2, #12
 8000430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000432:	f04f 33ff 	mov.w	r3, #4294967295
 8000436:	e009      	b.n	800044c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <_sbrk+0x64>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <_sbrk+0x64>)
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4413      	add	r3, r2
 8000446:	4a05      	ldr	r2, [pc, #20]	; (800045c <_sbrk+0x64>)
 8000448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800044a:	68fb      	ldr	r3, [r7, #12]
}
 800044c:	4618      	mov	r0, r3
 800044e:	3718      	adds	r7, #24
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20020000 	.word	0x20020000
 8000458:	00000400 	.word	0x00000400
 800045c:	20000080 	.word	0x20000080
 8000460:	20000098 	.word	0x20000098

08000464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000466:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000468:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800046c:	480c      	ldr	r0, [pc, #48]	; (80004a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800046e:	490d      	ldr	r1, [pc, #52]	; (80004a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <LoopForever+0xe>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000474:	e002      	b.n	800047c <LoopCopyDataInit>

08000476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047a:	3304      	adds	r3, #4

0800047c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800047c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000480:	d3f9      	bcc.n	8000476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000484:	4c0a      	ldr	r4, [pc, #40]	; (80004b0 <LoopForever+0x16>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000488:	e001      	b.n	800048e <LoopFillZerobss>

0800048a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800048c:	3204      	adds	r2, #4

0800048e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000490:	d3fb      	bcc.n	800048a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000492:	f000 fbb1 	bl	8000bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000496:	f7ff fee7 	bl	8000268 <main>

0800049a <LoopForever>:

LoopForever:
    b LoopForever
 800049a:	e7fe      	b.n	800049a <LoopForever>
  ldr   r0, =_estack
 800049c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80004a8:	080016e4 	.word	0x080016e4
  ldr r2, =_sbss
 80004ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80004b0:	20000094 	.word	0x20000094

080004b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC_IRQHandler>
	...

080004b8 <SPI_PeriClockControl>:
 * @return				-None
 *
 * @note				-None
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80004c4:	78fb      	ldrb	r3, [r7, #3]
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d136      	bne.n	8000538 <SPI_PeriClockControl+0x80>
	{
		if (pSPIx == SPI1)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a38      	ldr	r2, [pc, #224]	; (80005b0 <SPI_PeriClockControl+0xf8>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 80004d2:	4b38      	ldr	r3, [pc, #224]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 80004d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004d6:	4a37      	ldr	r2, [pc, #220]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 80004d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004dc:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == SPI5)
		{
			SPI5_PCLK_DI();
		}
	}
}
 80004de:	e061      	b.n	80005a4 <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI2)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a35      	ldr	r2, [pc, #212]	; (80005b8 <SPI_PeriClockControl+0x100>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80004e8:	4b32      	ldr	r3, [pc, #200]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 80004ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ec:	4a31      	ldr	r2, [pc, #196]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 80004ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80004f4:	e056      	b.n	80005a4 <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI3)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a30      	ldr	r2, [pc, #192]	; (80005bc <SPI_PeriClockControl+0x104>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d106      	bne.n	800050c <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 80004fe:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 8000500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000502:	4a2c      	ldr	r2, [pc, #176]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 8000504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000508:	6413      	str	r3, [r2, #64]	; 0x40
}
 800050a:	e04b      	b.n	80005a4 <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI4)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a2c      	ldr	r2, [pc, #176]	; (80005c0 <SPI_PeriClockControl+0x108>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d106      	bne.n	8000522 <SPI_PeriClockControl+0x6a>
			SPI4_PCLK_EN();
 8000514:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 8000516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000518:	4a26      	ldr	r2, [pc, #152]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 800051a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800051e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000520:	e040      	b.n	80005a4 <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI5)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <SPI_PeriClockControl+0x10c>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d13c      	bne.n	80005a4 <SPI_PeriClockControl+0xec>
			SPI5_PCLK_EN();
 800052a:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 800052c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800052e:	4a21      	ldr	r2, [pc, #132]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 8000530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000534:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000536:	e035      	b.n	80005a4 <SPI_PeriClockControl+0xec>
		if (pSPIx == SPI1)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a1d      	ldr	r2, [pc, #116]	; (80005b0 <SPI_PeriClockControl+0xf8>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d106      	bne.n	800054e <SPI_PeriClockControl+0x96>
			SPI1_PCLK_DI();
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 8000542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000544:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 8000546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800054a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800054c:	e02a      	b.n	80005a4 <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI2)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a19      	ldr	r2, [pc, #100]	; (80005b8 <SPI_PeriClockControl+0x100>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d106      	bne.n	8000564 <SPI_PeriClockControl+0xac>
			SPI2_PCLK_DI();
 8000556:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 8000558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055a:	4a16      	ldr	r2, [pc, #88]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 800055c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000560:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000562:	e01f      	b.n	80005a4 <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI3)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a15      	ldr	r2, [pc, #84]	; (80005bc <SPI_PeriClockControl+0x104>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d106      	bne.n	800057a <SPI_PeriClockControl+0xc2>
			SPI3_PCLK_DI();
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 8000572:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000578:	e014      	b.n	80005a4 <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI4)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <SPI_PeriClockControl+0x108>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d106      	bne.n	8000590 <SPI_PeriClockControl+0xd8>
			SPI4_PCLK_DI();
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 8000584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 8000588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800058c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800058e:	e009      	b.n	80005a4 <SPI_PeriClockControl+0xec>
		else if (pSPIx == SPI5)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <SPI_PeriClockControl+0x10c>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d105      	bne.n	80005a4 <SPI_PeriClockControl+0xec>
			SPI5_PCLK_DI();
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 800059a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800059c:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <SPI_PeriClockControl+0xfc>)
 800059e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80005a2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40013000 	.word	0x40013000
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40003800 	.word	0x40003800
 80005bc:	40003c00 	.word	0x40003c00
 80005c0:	40013400 	.word	0x40013400
 80005c4:	40015000 	.word	0x40015000

080005c8 <SPI_Init>:
 * @return				-None
 *
 * @note				-None
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

	//spi peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2101      	movs	r1, #1
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff6e 	bl	80004b8 <SPI_PeriClockControl>

	//configure control register1

	uint32_t temp = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]

	//1. configure device mode
	temp |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR_BIT);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	461a      	mov	r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]

	//2. bus configure
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	795b      	ldrb	r3, [r3, #5]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d104      	bne.n	8000600 <SPI_Init+0x38>
	{
		//clear the bidi mode
		temp &= ~(1 << SPI_CR1_BIDI_MODE_BIT);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	e014      	b.n	800062a <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	795b      	ldrb	r3, [r3, #5]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d104      	bne.n	8000612 <SPI_Init+0x4a>
	{
		//set the bidi mode
		temp |= (1 << SPI_CR1_BIDI_MODE_BIT);
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	e00b      	b.n	800062a <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	795b      	ldrb	r3, [r3, #5]
 8000616:	2b02      	cmp	r3, #2
 8000618:	d107      	bne.n	800062a <SPI_Init+0x62>
			== SPI_BUS_CONFIG_SIMPLEX_RXONLY)
	{
		//clear the bidi mode
		temp &= ~(1 << SPI_CR1_BIDI_MODE_BIT);
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000620:	60fb      	str	r3, [r7, #12]

		//set rxonly
		temp |= (1 << SPI_CR1_RX_ONLY_BIT);
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000628:	60fb      	str	r3, [r7, #12]

	}

	//3. configure SCLK speed
	temp |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR_BIT);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	799b      	ldrb	r3, [r3, #6]
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	461a      	mov	r2, r3
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	4313      	orrs	r3, r2
 8000636:	60fb      	str	r3, [r7, #12]

	//4. configure spi frame format
	temp |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF_BIT);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	79db      	ldrb	r3, [r3, #7]
 800063c:	02db      	lsls	r3, r3, #11
 800063e:	461a      	mov	r2, r3
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4313      	orrs	r3, r2
 8000644:	60fb      	str	r3, [r7, #12]

	//5. configure CPOL
	temp |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL_BIT);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	7a1b      	ldrb	r3, [r3, #8]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	461a      	mov	r2, r3
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	4313      	orrs	r3, r2
 8000652:	60fb      	str	r3, [r7, #12]

	//6. configure CPHA
	temp |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA_BIT);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	7a5b      	ldrb	r3, [r3, #9]
 8000658:	461a      	mov	r2, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	4313      	orrs	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]

	//7. configure SSM
	temp |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM_BIT);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	7a9b      	ldrb	r3, [r3, #10]
 8000664:	025b      	lsls	r3, r3, #9
 8000666:	461a      	mov	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	4313      	orrs	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]

	//initialize the CPR1
	pSPIHandle->pSPIx->CR1 = temp;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	601a      	str	r2, [r3, #0]

}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <SPI_GetFlagStatus>:
	}

}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint8_t flagName)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	460b      	mov	r3, r1
 8000688:	70fb      	strb	r3, [r7, #3]
	if (pSPIx->SR & flagName)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	78fb      	ldrb	r3, [r7, #3]
 8000690:	4013      	ands	r3, r2
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SPI_GetFlagStatus+0x1c>
	{
		return FLAG_SET;
 8000696:	2301      	movs	r3, #1
 8000698:	e000      	b.n	800069c <SPI_GetFlagStatus+0x1e>
	}
	return FLAG_RESET;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr

080006a6 <SPI_SendData>:
 * @return				-None
 *
 * @note				-This is blocking call
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b084      	sub	sp, #16
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
	while (len > 0)
 80006b2:	e024      	b.n	80006fe <SPI_SendData+0x58>
	{
		//1. wait for TXE to set
		while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET)
 80006b4:	bf00      	nop
 80006b6:	2102      	movs	r1, #2
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	f7ff ffe0 	bl	800067e <SPI_GetFlagStatus>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d0f8      	beq.n	80006b6 <SPI_SendData+0x10>
			;

		//2. check the DFF bit in CR1
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF_BIT))
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00b      	beq.n	80006e8 <SPI_SendData+0x42>
		{
			//16 bit frame format
			pSPIx->DR = *((uint16_t*) pTxBuffer);
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60da      	str	r2, [r3, #12]
			len -= 2;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3b02      	subs	r3, #2
 80006de:	607b      	str	r3, [r7, #4]
			(uint16_t*) pTxBuffer++;
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	3301      	adds	r3, #1
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	e00a      	b.n	80006fe <SPI_SendData+0x58>
		}
		else
		{
			//8 bit frame format
			pSPIx->DR = *pTxBuffer;
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	60da      	str	r2, [r3, #12]
			len--;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	3301      	adds	r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]
	while (len > 0)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1d7      	bne.n	80006b4 <SPI_SendData+0xe>
		}

	}

}
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <SPI_PeriControl>:
 * @return				-None
 *
 * @note				-None
 */
void SPI_PeriControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	460b      	mov	r3, r1
 8000718:	70fb      	strb	r3, [r7, #3]
	pSPIx->CR1 &= ~(1 << SPI_CR1_SPE_BIT); //clear SPE bit
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	601a      	str	r2, [r3, #0]
	pSPIx->CR1 |= (EnOrDi << SPI_CR1_SPE_BIT); //set data to SPE bit
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	78fa      	ldrb	r2, [r7, #3]
 800072c:	0192      	lsls	r2, r2, #6
 800072e:	431a      	orrs	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr

0800073e <SPI_SSI_Config>:
 * @return				-None
 *
 * @note				-None
 */
void SPI_SSI_Config(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	460b      	mov	r3, r1
 8000748:	70fb      	strb	r3, [r7, #3]
	pSPIx->CR1 &= ~(1 << SPI_CR1_SSI_BIT); //clear SSI bit
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]
	pSPIx->CR1 |= (EnOrDi << SPI_CR1_SSI_BIT); //set data to SSI bit
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	78fa      	ldrb	r2, [r7, #3]
 800075c:	0212      	lsls	r2, r2, #8
 800075e:	431a      	orrs	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	601a      	str	r2, [r3, #0]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
	...

08000770 <GPIO_PeriClockControl>:
 * @return				-None
 *
 * @note				-None
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGpIOx, uint8_t EnOrDi)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	460b      	mov	r3, r1
 800077a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d141      	bne.n	8000806 <GPIO_PeriClockControl+0x96>
	{
		if (pGpIOx == GPIOA)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a43      	ldr	r2, [pc, #268]	; (8000894 <GPIO_PeriClockControl+0x124>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d106      	bne.n	8000798 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800078a:	4b43      	ldr	r3, [pc, #268]	; (8000898 <GPIO_PeriClockControl+0x128>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a42      	ldr	r2, [pc, #264]	; (8000898 <GPIO_PeriClockControl+0x128>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DI();
		}
	}

}
 8000796:	e077      	b.n	8000888 <GPIO_PeriClockControl+0x118>
		else if (pGpIOx == GPIOB)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a40      	ldr	r2, [pc, #256]	; (800089c <GPIO_PeriClockControl+0x12c>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d106      	bne.n	80007ae <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80007a0:	4b3d      	ldr	r3, [pc, #244]	; (8000898 <GPIO_PeriClockControl+0x128>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	4a3c      	ldr	r2, [pc, #240]	; (8000898 <GPIO_PeriClockControl+0x128>)
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ac:	e06c      	b.n	8000888 <GPIO_PeriClockControl+0x118>
		else if (pGpIOx == GPIOC)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a3b      	ldr	r2, [pc, #236]	; (80008a0 <GPIO_PeriClockControl+0x130>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d106      	bne.n	80007c4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80007b6:	4b38      	ldr	r3, [pc, #224]	; (8000898 <GPIO_PeriClockControl+0x128>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a37      	ldr	r2, [pc, #220]	; (8000898 <GPIO_PeriClockControl+0x128>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c2:	e061      	b.n	8000888 <GPIO_PeriClockControl+0x118>
		else if (pGpIOx == GPIOD)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a37      	ldr	r2, [pc, #220]	; (80008a4 <GPIO_PeriClockControl+0x134>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d106      	bne.n	80007da <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80007cc:	4b32      	ldr	r3, [pc, #200]	; (8000898 <GPIO_PeriClockControl+0x128>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	4a31      	ldr	r2, [pc, #196]	; (8000898 <GPIO_PeriClockControl+0x128>)
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d8:	e056      	b.n	8000888 <GPIO_PeriClockControl+0x118>
		else if (pGpIOx == GPIOE)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a32      	ldr	r2, [pc, #200]	; (80008a8 <GPIO_PeriClockControl+0x138>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d106      	bne.n	80007f0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <GPIO_PeriClockControl+0x128>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a2c      	ldr	r2, [pc, #176]	; (8000898 <GPIO_PeriClockControl+0x128>)
 80007e8:	f043 0310 	orr.w	r3, r3, #16
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ee:	e04b      	b.n	8000888 <GPIO_PeriClockControl+0x118>
		else if (pGpIOx == GPIOH)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a2e      	ldr	r2, [pc, #184]	; (80008ac <GPIO_PeriClockControl+0x13c>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d147      	bne.n	8000888 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 80007f8:	4b27      	ldr	r3, [pc, #156]	; (8000898 <GPIO_PeriClockControl+0x128>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	4a26      	ldr	r2, [pc, #152]	; (8000898 <GPIO_PeriClockControl+0x128>)
 80007fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000802:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000804:	e040      	b.n	8000888 <GPIO_PeriClockControl+0x118>
		if (pGpIOx == GPIOA)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a22      	ldr	r2, [pc, #136]	; (8000894 <GPIO_PeriClockControl+0x124>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d106      	bne.n	800081c <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800080e:	4b22      	ldr	r3, [pc, #136]	; (8000898 <GPIO_PeriClockControl+0x128>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a21      	ldr	r2, [pc, #132]	; (8000898 <GPIO_PeriClockControl+0x128>)
 8000814:	f023 0301 	bic.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
}
 800081a:	e035      	b.n	8000888 <GPIO_PeriClockControl+0x118>
		else if (pGpIOx == GPIOB)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a1f      	ldr	r2, [pc, #124]	; (800089c <GPIO_PeriClockControl+0x12c>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d106      	bne.n	8000832 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <GPIO_PeriClockControl+0x128>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <GPIO_PeriClockControl+0x128>)
 800082a:	f023 0302 	bic.w	r3, r3, #2
 800082e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000830:	e02a      	b.n	8000888 <GPIO_PeriClockControl+0x118>
		else if (pGpIOx == GPIOC)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a1a      	ldr	r2, [pc, #104]	; (80008a0 <GPIO_PeriClockControl+0x130>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d106      	bne.n	8000848 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <GPIO_PeriClockControl+0x128>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <GPIO_PeriClockControl+0x128>)
 8000840:	f023 0304 	bic.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000846:	e01f      	b.n	8000888 <GPIO_PeriClockControl+0x118>
		else if (pGpIOx == GPIOD)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <GPIO_PeriClockControl+0x134>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d106      	bne.n	800085e <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <GPIO_PeriClockControl+0x128>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	4a10      	ldr	r2, [pc, #64]	; (8000898 <GPIO_PeriClockControl+0x128>)
 8000856:	f023 0308 	bic.w	r3, r3, #8
 800085a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800085c:	e014      	b.n	8000888 <GPIO_PeriClockControl+0x118>
		else if (pGpIOx == GPIOE)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <GPIO_PeriClockControl+0x138>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d106      	bne.n	8000874 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <GPIO_PeriClockControl+0x128>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <GPIO_PeriClockControl+0x128>)
 800086c:	f023 0310 	bic.w	r3, r3, #16
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000872:	e009      	b.n	8000888 <GPIO_PeriClockControl+0x118>
		else if (pGpIOx == GPIOH)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <GPIO_PeriClockControl+0x13c>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d105      	bne.n	8000888 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <GPIO_PeriClockControl+0x128>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	4a05      	ldr	r2, [pc, #20]	; (8000898 <GPIO_PeriClockControl+0x128>)
 8000882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000886:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40020000 	.word	0x40020000
 8000898:	40023800 	.word	0x40023800
 800089c:	40020400 	.word	0x40020400
 80008a0:	40020800 	.word	0x40020800
 80008a4:	40020c00 	.word	0x40020c00
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40021c00 	.word	0x40021c00

080008b0 <GPIO_Init>:
 * @return				-None
 *
 * @note				-None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

	//peripheral clock enable
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2101      	movs	r1, #1
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff56 	bl	8000770 <GPIO_PeriClockControl>

	uint32_t temp1, temp2;
	temp1 = 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNo; //count to left shift
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	791b      	ldrb	r3, [r3, #4]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	61fb      	str	r3, [r7, #28]
	//1. configure mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	795b      	ldrb	r3, [r3, #5]
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d81c      	bhi.n	800090e <GPIO_Init+0x5e>
	{

		temp2 = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << temp1);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	795b      	ldrb	r3, [r3, #5]
 80008d8:	461a      	mov	r2, r3
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << temp1); //clear required bit
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	2103      	movs	r1, #3
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	4619      	mov	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	400a      	ands	r2, r1
 80008fa:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp2; //set required bit
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	6819      	ldr	r1, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	430a      	orrs	r2, r1
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	e0bf      	b.n	8000a8e <GPIO_Init+0x1de>

	}
	else //interrupt
	{
		pGPIOHandle->pGPIOx->MODER &= ~(3 << temp1); //set mode as input 00-input mode
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	2103      	movs	r1, #3
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	fa01 f303 	lsl.w	r3, r1, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	4619      	mov	r1, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	400a      	ands	r2, r1
 8000926:	601a      	str	r2, [r3, #0]

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNo;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	791b      	ldrb	r3, [r3, #4]
 800092c:	61fb      	str	r3, [r7, #28]

		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FE)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	795b      	ldrb	r3, [r3, #5]
 8000932:	2b04      	cmp	r3, #4
 8000934:	d115      	bne.n	8000962 <GPIO_Init+0xb2>
		{
			//1. configure the EXTI_FTSR
			EXTI->FTSR |= (1 << temp1);
 8000936:	4b97      	ldr	r3, [pc, #604]	; (8000b94 <GPIO_Init+0x2e4>)
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	2101      	movs	r1, #1
 800093c:	69fa      	ldr	r2, [r7, #28]
 800093e:	fa01 f202 	lsl.w	r2, r1, r2
 8000942:	4611      	mov	r1, r2
 8000944:	4a93      	ldr	r2, [pc, #588]	; (8000b94 <GPIO_Init+0x2e4>)
 8000946:	430b      	orrs	r3, r1
 8000948:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << temp1);
 800094a:	4b92      	ldr	r3, [pc, #584]	; (8000b94 <GPIO_Init+0x2e4>)
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	2101      	movs	r1, #1
 8000950:	69fa      	ldr	r2, [r7, #28]
 8000952:	fa01 f202 	lsl.w	r2, r1, r2
 8000956:	43d2      	mvns	r2, r2
 8000958:	4611      	mov	r1, r2
 800095a:	4a8e      	ldr	r2, [pc, #568]	; (8000b94 <GPIO_Init+0x2e4>)
 800095c:	400b      	ands	r3, r1
 800095e:	6093      	str	r3, [r2, #8]
 8000960:	e031      	b.n	80009c6 <GPIO_Init+0x116>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RE)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	795b      	ldrb	r3, [r3, #5]
 8000966:	2b05      	cmp	r3, #5
 8000968:	d115      	bne.n	8000996 <GPIO_Init+0xe6>
		{
			//1. configure the EXTI_RTSR
			EXTI->RTSR |= (1 << temp1);
 800096a:	4b8a      	ldr	r3, [pc, #552]	; (8000b94 <GPIO_Init+0x2e4>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	2101      	movs	r1, #1
 8000970:	69fa      	ldr	r2, [r7, #28]
 8000972:	fa01 f202 	lsl.w	r2, r1, r2
 8000976:	4611      	mov	r1, r2
 8000978:	4a86      	ldr	r2, [pc, #536]	; (8000b94 <GPIO_Init+0x2e4>)
 800097a:	430b      	orrs	r3, r1
 800097c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << temp1);
 800097e:	4b85      	ldr	r3, [pc, #532]	; (8000b94 <GPIO_Init+0x2e4>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	2101      	movs	r1, #1
 8000984:	69fa      	ldr	r2, [r7, #28]
 8000986:	fa01 f202 	lsl.w	r2, r1, r2
 800098a:	43d2      	mvns	r2, r2
 800098c:	4611      	mov	r1, r2
 800098e:	4a81      	ldr	r2, [pc, #516]	; (8000b94 <GPIO_Init+0x2e4>)
 8000990:	400b      	ands	r3, r1
 8000992:	60d3      	str	r3, [r2, #12]
 8000994:	e017      	b.n	80009c6 <GPIO_Init+0x116>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_REFE)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	795b      	ldrb	r3, [r3, #5]
 800099a:	2b06      	cmp	r3, #6
 800099c:	d113      	bne.n	80009c6 <GPIO_Init+0x116>
		{
			//1. configure both EXTI_RTSR and EXTI_FTSR
			EXTI->RTSR |= (1 << temp1);
 800099e:	4b7d      	ldr	r3, [pc, #500]	; (8000b94 <GPIO_Init+0x2e4>)
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	2101      	movs	r1, #1
 80009a4:	69fa      	ldr	r2, [r7, #28]
 80009a6:	fa01 f202 	lsl.w	r2, r1, r2
 80009aa:	4611      	mov	r1, r2
 80009ac:	4a79      	ldr	r2, [pc, #484]	; (8000b94 <GPIO_Init+0x2e4>)
 80009ae:	430b      	orrs	r3, r1
 80009b0:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << temp1);
 80009b2:	4b78      	ldr	r3, [pc, #480]	; (8000b94 <GPIO_Init+0x2e4>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	2101      	movs	r1, #1
 80009b8:	69fa      	ldr	r2, [r7, #28]
 80009ba:	fa01 f202 	lsl.w	r2, r1, r2
 80009be:	4611      	mov	r1, r2
 80009c0:	4a74      	ldr	r2, [pc, #464]	; (8000b94 <GPIO_Init+0x2e4>)
 80009c2:	430b      	orrs	r3, r1
 80009c4:	60d3      	str	r3, [r2, #12]

		}

		//2.configure the GPIO port selection in SYSCFG_EXTICR
		uint32_t t1, t2;
		t1 = temp1 / 4;
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	089b      	lsrs	r3, r3, #2
 80009ca:	61bb      	str	r3, [r7, #24]
		t2 = temp1 % 4;
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	617b      	str	r3, [r7, #20]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a6f      	ldr	r2, [pc, #444]	; (8000b98 <GPIO_Init+0x2e8>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d024      	beq.n	8000a28 <GPIO_Init+0x178>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a6e      	ldr	r2, [pc, #440]	; (8000b9c <GPIO_Init+0x2ec>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d01d      	beq.n	8000a24 <GPIO_Init+0x174>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a6c      	ldr	r2, [pc, #432]	; (8000ba0 <GPIO_Init+0x2f0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d016      	beq.n	8000a20 <GPIO_Init+0x170>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a6b      	ldr	r2, [pc, #428]	; (8000ba4 <GPIO_Init+0x2f4>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d00f      	beq.n	8000a1c <GPIO_Init+0x16c>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a69      	ldr	r2, [pc, #420]	; (8000ba8 <GPIO_Init+0x2f8>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d008      	beq.n	8000a18 <GPIO_Init+0x168>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a68      	ldr	r2, [pc, #416]	; (8000bac <GPIO_Init+0x2fc>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d101      	bne.n	8000a14 <GPIO_Init+0x164>
 8000a10:	2307      	movs	r3, #7
 8000a12:	e00a      	b.n	8000a2a <GPIO_Init+0x17a>
 8000a14:	2300      	movs	r3, #0
 8000a16:	e008      	b.n	8000a2a <GPIO_Init+0x17a>
 8000a18:	2304      	movs	r3, #4
 8000a1a:	e006      	b.n	8000a2a <GPIO_Init+0x17a>
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	e004      	b.n	8000a2a <GPIO_Init+0x17a>
 8000a20:	2302      	movs	r3, #2
 8000a22:	e002      	b.n	8000a2a <GPIO_Init+0x17a>
 8000a24:	2301      	movs	r3, #1
 8000a26:	e000      	b.n	8000a2a <GPIO_Init+0x17a>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	74fb      	strb	r3, [r7, #19]
		SYSCFG_PCLK_EN();
 8000a2c:	4b60      	ldr	r3, [pc, #384]	; (8000bb0 <GPIO_Init+0x300>)
 8000a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a30:	4a5f      	ldr	r2, [pc, #380]	; (8000bb0 <GPIO_Init+0x300>)
 8000a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a36:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[t1] &= ~(0xF << (t2 * 4));
 8000a38:	4a5e      	ldr	r2, [pc, #376]	; (8000bb4 <GPIO_Init+0x304>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	0092      	lsls	r2, r2, #2
 8000a46:	210f      	movs	r1, #15
 8000a48:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4c:	43d2      	mvns	r2, r2
 8000a4e:	4959      	ldr	r1, [pc, #356]	; (8000bb4 <GPIO_Init+0x304>)
 8000a50:	401a      	ands	r2, r3
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	3302      	adds	r3, #2
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[t1] |= (portCode << (t2 * 4));
 8000a5a:	4a56      	ldr	r2, [pc, #344]	; (8000bb4 <GPIO_Init+0x304>)
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	3302      	adds	r3, #2
 8000a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a64:	7cf9      	ldrb	r1, [r7, #19]
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6e:	4951      	ldr	r1, [pc, #324]	; (8000bb4 <GPIO_Init+0x304>)
 8000a70:	431a      	orrs	r2, r3
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	3302      	adds	r3, #2
 8000a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3.Un-mask the line
		EXTI->IMR |= (1<<temp1);
 8000a7a:	4b46      	ldr	r3, [pc, #280]	; (8000b94 <GPIO_Init+0x2e4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2101      	movs	r1, #1
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	fa01 f202 	lsl.w	r2, r1, r2
 8000a86:	4611      	mov	r1, r2
 8000a88:	4a42      	ldr	r2, [pc, #264]	; (8000b94 <GPIO_Init+0x2e4>)
 8000a8a:	430b      	orrs	r3, r1
 8000a8c:	6013      	str	r3, [r2, #0]
	}

//2. configure pin speed
//	temp1 = 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNo;
	temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << temp1);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	799b      	ldrb	r3, [r3, #6]
 8000a92:	461a      	mov	r2, r3
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(3 << temp1); //clear bit
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	2103      	movs	r1, #3
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	4619      	mov	r1, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	400a      	ands	r2, r1
 8000ab4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp2;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6899      	ldr	r1, [r3, #8]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	609a      	str	r2, [r3, #8]

//3. configure pin pull up/down
//	temp1 = 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNo;
	temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << temp1);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	79db      	ldrb	r3, [r3, #7]
 8000aca:	461a      	mov	r2, r3
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << temp1);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	68da      	ldr	r2, [r3, #12]
 8000ada:	2103      	movs	r1, #3
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	400a      	ands	r2, r1
 8000aec:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp2;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68d9      	ldr	r1, [r3, #12]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	430a      	orrs	r2, r1
 8000afc:	60da      	str	r2, [r3, #12]

//4. configure output type
	temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNo;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	791b      	ldrb	r3, [r3, #4]
 8000b02:	61fb      	str	r3, [r7, #28]
	temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType << temp1);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7a1b      	ldrb	r3, [r3, #8]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << temp1);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	2101      	movs	r1, #1
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	4619      	mov	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	400a      	ands	r2, r1
 8000b2a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp2;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6859      	ldr	r1, [r3, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	605a      	str	r2, [r3, #4]

//5. configure alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) //configure only if mode is alternate functionality
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	795b      	ldrb	r3, [r3, #5]
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d14e      	bne.n	8000be2 <GPIO_Init+0x332>
	{
		uint8_t pin = pGPIOHandle->GPIO_PinConfig.GPIO_PinNo;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	791b      	ldrb	r3, [r3, #4]
 8000b48:	72fb      	strb	r3, [r7, #11]
		temp1 = (pin % 8) * 4;
 8000b4a:	7afb      	ldrb	r3, [r7, #11]
 8000b4c:	f003 0307 	and.w	r3, r3, #7
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << temp1);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7a5b      	ldrb	r3, [r3, #9]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	60fb      	str	r3, [r7, #12]
		if (pin > 7)
 8000b62:	7afb      	ldrb	r3, [r7, #11]
 8000b64:	2b07      	cmp	r3, #7
 8000b66:	d927      	bls.n	8000bb8 <GPIO_Init+0x308>
		{
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF << temp1); //clear 4 bit
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b6e:	210f      	movs	r1, #15
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	4619      	mov	r1, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	400a      	ands	r2, r1
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= temp2;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << temp1); //clear 4 bit
			pGPIOHandle->pGPIOx->AFRL |= temp2;
		}
	}

}
 8000b92:	e026      	b.n	8000be2 <GPIO_Init+0x332>
 8000b94:	40013c00 	.word	0x40013c00
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40021c00 	.word	0x40021c00
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40013800 	.word	0x40013800
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << temp1); //clear 4 bit
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	6a1a      	ldr	r2, [r3, #32]
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	4619      	mov	r1, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	400a      	ands	r2, r1
 8000bd0:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= temp2;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	6a19      	ldr	r1, [r3, #32]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	430a      	orrs	r2, r1
 8000be0:	621a      	str	r2, [r3, #32]
}
 8000be2:	bf00      	nop
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop

08000bec <__errno>:
 8000bec:	4b01      	ldr	r3, [pc, #4]	; (8000bf4 <__errno+0x8>)
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000000 	.word	0x20000000

08000bf8 <__libc_init_array>:
 8000bf8:	b570      	push	{r4, r5, r6, lr}
 8000bfa:	4d0d      	ldr	r5, [pc, #52]	; (8000c30 <__libc_init_array+0x38>)
 8000bfc:	4c0d      	ldr	r4, [pc, #52]	; (8000c34 <__libc_init_array+0x3c>)
 8000bfe:	1b64      	subs	r4, r4, r5
 8000c00:	10a4      	asrs	r4, r4, #2
 8000c02:	2600      	movs	r6, #0
 8000c04:	42a6      	cmp	r6, r4
 8000c06:	d109      	bne.n	8000c1c <__libc_init_array+0x24>
 8000c08:	4d0b      	ldr	r5, [pc, #44]	; (8000c38 <__libc_init_array+0x40>)
 8000c0a:	4c0c      	ldr	r4, [pc, #48]	; (8000c3c <__libc_init_array+0x44>)
 8000c0c:	f000 fd18 	bl	8001640 <_init>
 8000c10:	1b64      	subs	r4, r4, r5
 8000c12:	10a4      	asrs	r4, r4, #2
 8000c14:	2600      	movs	r6, #0
 8000c16:	42a6      	cmp	r6, r4
 8000c18:	d105      	bne.n	8000c26 <__libc_init_array+0x2e>
 8000c1a:	bd70      	pop	{r4, r5, r6, pc}
 8000c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c20:	4798      	blx	r3
 8000c22:	3601      	adds	r6, #1
 8000c24:	e7ee      	b.n	8000c04 <__libc_init_array+0xc>
 8000c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c2a:	4798      	blx	r3
 8000c2c:	3601      	adds	r6, #1
 8000c2e:	e7f2      	b.n	8000c16 <__libc_init_array+0x1e>
 8000c30:	080016dc 	.word	0x080016dc
 8000c34:	080016dc 	.word	0x080016dc
 8000c38:	080016dc 	.word	0x080016dc
 8000c3c:	080016e0 	.word	0x080016e0

08000c40 <memset>:
 8000c40:	4402      	add	r2, r0
 8000c42:	4603      	mov	r3, r0
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d100      	bne.n	8000c4a <memset+0xa>
 8000c48:	4770      	bx	lr
 8000c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8000c4e:	e7f9      	b.n	8000c44 <memset+0x4>

08000c50 <_puts_r>:
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	460e      	mov	r6, r1
 8000c54:	4605      	mov	r5, r0
 8000c56:	b118      	cbz	r0, 8000c60 <_puts_r+0x10>
 8000c58:	6983      	ldr	r3, [r0, #24]
 8000c5a:	b90b      	cbnz	r3, 8000c60 <_puts_r+0x10>
 8000c5c:	f000 fa44 	bl	80010e8 <__sinit>
 8000c60:	69ab      	ldr	r3, [r5, #24]
 8000c62:	68ac      	ldr	r4, [r5, #8]
 8000c64:	b913      	cbnz	r3, 8000c6c <_puts_r+0x1c>
 8000c66:	4628      	mov	r0, r5
 8000c68:	f000 fa3e 	bl	80010e8 <__sinit>
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <_puts_r+0xd0>)
 8000c6e:	429c      	cmp	r4, r3
 8000c70:	d120      	bne.n	8000cb4 <_puts_r+0x64>
 8000c72:	686c      	ldr	r4, [r5, #4]
 8000c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c76:	07db      	lsls	r3, r3, #31
 8000c78:	d405      	bmi.n	8000c86 <_puts_r+0x36>
 8000c7a:	89a3      	ldrh	r3, [r4, #12]
 8000c7c:	0598      	lsls	r0, r3, #22
 8000c7e:	d402      	bmi.n	8000c86 <_puts_r+0x36>
 8000c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c82:	f000 facf 	bl	8001224 <__retarget_lock_acquire_recursive>
 8000c86:	89a3      	ldrh	r3, [r4, #12]
 8000c88:	0719      	lsls	r1, r3, #28
 8000c8a:	d51d      	bpl.n	8000cc8 <_puts_r+0x78>
 8000c8c:	6923      	ldr	r3, [r4, #16]
 8000c8e:	b1db      	cbz	r3, 8000cc8 <_puts_r+0x78>
 8000c90:	3e01      	subs	r6, #1
 8000c92:	68a3      	ldr	r3, [r4, #8]
 8000c94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	60a3      	str	r3, [r4, #8]
 8000c9c:	bb39      	cbnz	r1, 8000cee <_puts_r+0x9e>
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da38      	bge.n	8000d14 <_puts_r+0xc4>
 8000ca2:	4622      	mov	r2, r4
 8000ca4:	210a      	movs	r1, #10
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	f000 f848 	bl	8000d3c <__swbuf_r>
 8000cac:	3001      	adds	r0, #1
 8000cae:	d011      	beq.n	8000cd4 <_puts_r+0x84>
 8000cb0:	250a      	movs	r5, #10
 8000cb2:	e011      	b.n	8000cd8 <_puts_r+0x88>
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <_puts_r+0xd4>)
 8000cb6:	429c      	cmp	r4, r3
 8000cb8:	d101      	bne.n	8000cbe <_puts_r+0x6e>
 8000cba:	68ac      	ldr	r4, [r5, #8]
 8000cbc:	e7da      	b.n	8000c74 <_puts_r+0x24>
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <_puts_r+0xd8>)
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	bf08      	it	eq
 8000cc4:	68ec      	ldreq	r4, [r5, #12]
 8000cc6:	e7d5      	b.n	8000c74 <_puts_r+0x24>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	4628      	mov	r0, r5
 8000ccc:	f000 f888 	bl	8000de0 <__swsetup_r>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d0dd      	beq.n	8000c90 <_puts_r+0x40>
 8000cd4:	f04f 35ff 	mov.w	r5, #4294967295
 8000cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cda:	07da      	lsls	r2, r3, #31
 8000cdc:	d405      	bmi.n	8000cea <_puts_r+0x9a>
 8000cde:	89a3      	ldrh	r3, [r4, #12]
 8000ce0:	059b      	lsls	r3, r3, #22
 8000ce2:	d402      	bmi.n	8000cea <_puts_r+0x9a>
 8000ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ce6:	f000 fa9e 	bl	8001226 <__retarget_lock_release_recursive>
 8000cea:	4628      	mov	r0, r5
 8000cec:	bd70      	pop	{r4, r5, r6, pc}
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	da04      	bge.n	8000cfc <_puts_r+0xac>
 8000cf2:	69a2      	ldr	r2, [r4, #24]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dc06      	bgt.n	8000d06 <_puts_r+0xb6>
 8000cf8:	290a      	cmp	r1, #10
 8000cfa:	d004      	beq.n	8000d06 <_puts_r+0xb6>
 8000cfc:	6823      	ldr	r3, [r4, #0]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	6022      	str	r2, [r4, #0]
 8000d02:	7019      	strb	r1, [r3, #0]
 8000d04:	e7c5      	b.n	8000c92 <_puts_r+0x42>
 8000d06:	4622      	mov	r2, r4
 8000d08:	4628      	mov	r0, r5
 8000d0a:	f000 f817 	bl	8000d3c <__swbuf_r>
 8000d0e:	3001      	adds	r0, #1
 8000d10:	d1bf      	bne.n	8000c92 <_puts_r+0x42>
 8000d12:	e7df      	b.n	8000cd4 <_puts_r+0x84>
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	250a      	movs	r5, #10
 8000d18:	1c5a      	adds	r2, r3, #1
 8000d1a:	6022      	str	r2, [r4, #0]
 8000d1c:	701d      	strb	r5, [r3, #0]
 8000d1e:	e7db      	b.n	8000cd8 <_puts_r+0x88>
 8000d20:	0800169c 	.word	0x0800169c
 8000d24:	080016bc 	.word	0x080016bc
 8000d28:	0800167c 	.word	0x0800167c

08000d2c <puts>:
 8000d2c:	4b02      	ldr	r3, [pc, #8]	; (8000d38 <puts+0xc>)
 8000d2e:	4601      	mov	r1, r0
 8000d30:	6818      	ldr	r0, [r3, #0]
 8000d32:	f7ff bf8d 	b.w	8000c50 <_puts_r>
 8000d36:	bf00      	nop
 8000d38:	20000000 	.word	0x20000000

08000d3c <__swbuf_r>:
 8000d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3e:	460e      	mov	r6, r1
 8000d40:	4614      	mov	r4, r2
 8000d42:	4605      	mov	r5, r0
 8000d44:	b118      	cbz	r0, 8000d4e <__swbuf_r+0x12>
 8000d46:	6983      	ldr	r3, [r0, #24]
 8000d48:	b90b      	cbnz	r3, 8000d4e <__swbuf_r+0x12>
 8000d4a:	f000 f9cd 	bl	80010e8 <__sinit>
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <__swbuf_r+0x98>)
 8000d50:	429c      	cmp	r4, r3
 8000d52:	d12b      	bne.n	8000dac <__swbuf_r+0x70>
 8000d54:	686c      	ldr	r4, [r5, #4]
 8000d56:	69a3      	ldr	r3, [r4, #24]
 8000d58:	60a3      	str	r3, [r4, #8]
 8000d5a:	89a3      	ldrh	r3, [r4, #12]
 8000d5c:	071a      	lsls	r2, r3, #28
 8000d5e:	d52f      	bpl.n	8000dc0 <__swbuf_r+0x84>
 8000d60:	6923      	ldr	r3, [r4, #16]
 8000d62:	b36b      	cbz	r3, 8000dc0 <__swbuf_r+0x84>
 8000d64:	6923      	ldr	r3, [r4, #16]
 8000d66:	6820      	ldr	r0, [r4, #0]
 8000d68:	1ac0      	subs	r0, r0, r3
 8000d6a:	6963      	ldr	r3, [r4, #20]
 8000d6c:	b2f6      	uxtb	r6, r6
 8000d6e:	4283      	cmp	r3, r0
 8000d70:	4637      	mov	r7, r6
 8000d72:	dc04      	bgt.n	8000d7e <__swbuf_r+0x42>
 8000d74:	4621      	mov	r1, r4
 8000d76:	4628      	mov	r0, r5
 8000d78:	f000 f922 	bl	8000fc0 <_fflush_r>
 8000d7c:	bb30      	cbnz	r0, 8000dcc <__swbuf_r+0x90>
 8000d7e:	68a3      	ldr	r3, [r4, #8]
 8000d80:	3b01      	subs	r3, #1
 8000d82:	60a3      	str	r3, [r4, #8]
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	6022      	str	r2, [r4, #0]
 8000d8a:	701e      	strb	r6, [r3, #0]
 8000d8c:	6963      	ldr	r3, [r4, #20]
 8000d8e:	3001      	adds	r0, #1
 8000d90:	4283      	cmp	r3, r0
 8000d92:	d004      	beq.n	8000d9e <__swbuf_r+0x62>
 8000d94:	89a3      	ldrh	r3, [r4, #12]
 8000d96:	07db      	lsls	r3, r3, #31
 8000d98:	d506      	bpl.n	8000da8 <__swbuf_r+0x6c>
 8000d9a:	2e0a      	cmp	r6, #10
 8000d9c:	d104      	bne.n	8000da8 <__swbuf_r+0x6c>
 8000d9e:	4621      	mov	r1, r4
 8000da0:	4628      	mov	r0, r5
 8000da2:	f000 f90d 	bl	8000fc0 <_fflush_r>
 8000da6:	b988      	cbnz	r0, 8000dcc <__swbuf_r+0x90>
 8000da8:	4638      	mov	r0, r7
 8000daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <__swbuf_r+0x9c>)
 8000dae:	429c      	cmp	r4, r3
 8000db0:	d101      	bne.n	8000db6 <__swbuf_r+0x7a>
 8000db2:	68ac      	ldr	r4, [r5, #8]
 8000db4:	e7cf      	b.n	8000d56 <__swbuf_r+0x1a>
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <__swbuf_r+0xa0>)
 8000db8:	429c      	cmp	r4, r3
 8000dba:	bf08      	it	eq
 8000dbc:	68ec      	ldreq	r4, [r5, #12]
 8000dbe:	e7ca      	b.n	8000d56 <__swbuf_r+0x1a>
 8000dc0:	4621      	mov	r1, r4
 8000dc2:	4628      	mov	r0, r5
 8000dc4:	f000 f80c 	bl	8000de0 <__swsetup_r>
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d0cb      	beq.n	8000d64 <__swbuf_r+0x28>
 8000dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8000dd0:	e7ea      	b.n	8000da8 <__swbuf_r+0x6c>
 8000dd2:	bf00      	nop
 8000dd4:	0800169c 	.word	0x0800169c
 8000dd8:	080016bc 	.word	0x080016bc
 8000ddc:	0800167c 	.word	0x0800167c

08000de0 <__swsetup_r>:
 8000de0:	4b32      	ldr	r3, [pc, #200]	; (8000eac <__swsetup_r+0xcc>)
 8000de2:	b570      	push	{r4, r5, r6, lr}
 8000de4:	681d      	ldr	r5, [r3, #0]
 8000de6:	4606      	mov	r6, r0
 8000de8:	460c      	mov	r4, r1
 8000dea:	b125      	cbz	r5, 8000df6 <__swsetup_r+0x16>
 8000dec:	69ab      	ldr	r3, [r5, #24]
 8000dee:	b913      	cbnz	r3, 8000df6 <__swsetup_r+0x16>
 8000df0:	4628      	mov	r0, r5
 8000df2:	f000 f979 	bl	80010e8 <__sinit>
 8000df6:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <__swsetup_r+0xd0>)
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	d10f      	bne.n	8000e1c <__swsetup_r+0x3c>
 8000dfc:	686c      	ldr	r4, [r5, #4]
 8000dfe:	89a3      	ldrh	r3, [r4, #12]
 8000e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000e04:	0719      	lsls	r1, r3, #28
 8000e06:	d42c      	bmi.n	8000e62 <__swsetup_r+0x82>
 8000e08:	06dd      	lsls	r5, r3, #27
 8000e0a:	d411      	bmi.n	8000e30 <__swsetup_r+0x50>
 8000e0c:	2309      	movs	r3, #9
 8000e0e:	6033      	str	r3, [r6, #0]
 8000e10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000e14:	81a3      	strh	r3, [r4, #12]
 8000e16:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1a:	e03e      	b.n	8000e9a <__swsetup_r+0xba>
 8000e1c:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <__swsetup_r+0xd4>)
 8000e1e:	429c      	cmp	r4, r3
 8000e20:	d101      	bne.n	8000e26 <__swsetup_r+0x46>
 8000e22:	68ac      	ldr	r4, [r5, #8]
 8000e24:	e7eb      	b.n	8000dfe <__swsetup_r+0x1e>
 8000e26:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <__swsetup_r+0xd8>)
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	bf08      	it	eq
 8000e2c:	68ec      	ldreq	r4, [r5, #12]
 8000e2e:	e7e6      	b.n	8000dfe <__swsetup_r+0x1e>
 8000e30:	0758      	lsls	r0, r3, #29
 8000e32:	d512      	bpl.n	8000e5a <__swsetup_r+0x7a>
 8000e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e36:	b141      	cbz	r1, 8000e4a <__swsetup_r+0x6a>
 8000e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d002      	beq.n	8000e46 <__swsetup_r+0x66>
 8000e40:	4630      	mov	r0, r6
 8000e42:	f000 fa57 	bl	80012f4 <_free_r>
 8000e46:	2300      	movs	r3, #0
 8000e48:	6363      	str	r3, [r4, #52]	; 0x34
 8000e4a:	89a3      	ldrh	r3, [r4, #12]
 8000e4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000e50:	81a3      	strh	r3, [r4, #12]
 8000e52:	2300      	movs	r3, #0
 8000e54:	6063      	str	r3, [r4, #4]
 8000e56:	6923      	ldr	r3, [r4, #16]
 8000e58:	6023      	str	r3, [r4, #0]
 8000e5a:	89a3      	ldrh	r3, [r4, #12]
 8000e5c:	f043 0308 	orr.w	r3, r3, #8
 8000e60:	81a3      	strh	r3, [r4, #12]
 8000e62:	6923      	ldr	r3, [r4, #16]
 8000e64:	b94b      	cbnz	r3, 8000e7a <__swsetup_r+0x9a>
 8000e66:	89a3      	ldrh	r3, [r4, #12]
 8000e68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e70:	d003      	beq.n	8000e7a <__swsetup_r+0x9a>
 8000e72:	4621      	mov	r1, r4
 8000e74:	4630      	mov	r0, r6
 8000e76:	f000 f9fd 	bl	8001274 <__smakebuf_r>
 8000e7a:	89a0      	ldrh	r0, [r4, #12]
 8000e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000e80:	f010 0301 	ands.w	r3, r0, #1
 8000e84:	d00a      	beq.n	8000e9c <__swsetup_r+0xbc>
 8000e86:	2300      	movs	r3, #0
 8000e88:	60a3      	str	r3, [r4, #8]
 8000e8a:	6963      	ldr	r3, [r4, #20]
 8000e8c:	425b      	negs	r3, r3
 8000e8e:	61a3      	str	r3, [r4, #24]
 8000e90:	6923      	ldr	r3, [r4, #16]
 8000e92:	b943      	cbnz	r3, 8000ea6 <__swsetup_r+0xc6>
 8000e94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000e98:	d1ba      	bne.n	8000e10 <__swsetup_r+0x30>
 8000e9a:	bd70      	pop	{r4, r5, r6, pc}
 8000e9c:	0781      	lsls	r1, r0, #30
 8000e9e:	bf58      	it	pl
 8000ea0:	6963      	ldrpl	r3, [r4, #20]
 8000ea2:	60a3      	str	r3, [r4, #8]
 8000ea4:	e7f4      	b.n	8000e90 <__swsetup_r+0xb0>
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	e7f7      	b.n	8000e9a <__swsetup_r+0xba>
 8000eaa:	bf00      	nop
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	0800169c 	.word	0x0800169c
 8000eb4:	080016bc 	.word	0x080016bc
 8000eb8:	0800167c 	.word	0x0800167c

08000ebc <__sflush_r>:
 8000ebc:	898a      	ldrh	r2, [r1, #12]
 8000ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec0:	4605      	mov	r5, r0
 8000ec2:	0710      	lsls	r0, r2, #28
 8000ec4:	460c      	mov	r4, r1
 8000ec6:	d457      	bmi.n	8000f78 <__sflush_r+0xbc>
 8000ec8:	684b      	ldr	r3, [r1, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	dc04      	bgt.n	8000ed8 <__sflush_r+0x1c>
 8000ece:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	dc01      	bgt.n	8000ed8 <__sflush_r+0x1c>
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d0fa      	beq.n	8000ed4 <__sflush_r+0x18>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000ee4:	682f      	ldr	r7, [r5, #0]
 8000ee6:	602b      	str	r3, [r5, #0]
 8000ee8:	d032      	beq.n	8000f50 <__sflush_r+0x94>
 8000eea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000eec:	89a3      	ldrh	r3, [r4, #12]
 8000eee:	075a      	lsls	r2, r3, #29
 8000ef0:	d505      	bpl.n	8000efe <__sflush_r+0x42>
 8000ef2:	6863      	ldr	r3, [r4, #4]
 8000ef4:	1ac0      	subs	r0, r0, r3
 8000ef6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ef8:	b10b      	cbz	r3, 8000efe <__sflush_r+0x42>
 8000efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000efc:	1ac0      	subs	r0, r0, r3
 8000efe:	2300      	movs	r3, #0
 8000f00:	4602      	mov	r2, r0
 8000f02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f04:	6a21      	ldr	r1, [r4, #32]
 8000f06:	4628      	mov	r0, r5
 8000f08:	47b0      	blx	r6
 8000f0a:	1c43      	adds	r3, r0, #1
 8000f0c:	89a3      	ldrh	r3, [r4, #12]
 8000f0e:	d106      	bne.n	8000f1e <__sflush_r+0x62>
 8000f10:	6829      	ldr	r1, [r5, #0]
 8000f12:	291d      	cmp	r1, #29
 8000f14:	d82c      	bhi.n	8000f70 <__sflush_r+0xb4>
 8000f16:	4a29      	ldr	r2, [pc, #164]	; (8000fbc <__sflush_r+0x100>)
 8000f18:	40ca      	lsrs	r2, r1
 8000f1a:	07d6      	lsls	r6, r2, #31
 8000f1c:	d528      	bpl.n	8000f70 <__sflush_r+0xb4>
 8000f1e:	2200      	movs	r2, #0
 8000f20:	6062      	str	r2, [r4, #4]
 8000f22:	04d9      	lsls	r1, r3, #19
 8000f24:	6922      	ldr	r2, [r4, #16]
 8000f26:	6022      	str	r2, [r4, #0]
 8000f28:	d504      	bpl.n	8000f34 <__sflush_r+0x78>
 8000f2a:	1c42      	adds	r2, r0, #1
 8000f2c:	d101      	bne.n	8000f32 <__sflush_r+0x76>
 8000f2e:	682b      	ldr	r3, [r5, #0]
 8000f30:	b903      	cbnz	r3, 8000f34 <__sflush_r+0x78>
 8000f32:	6560      	str	r0, [r4, #84]	; 0x54
 8000f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f36:	602f      	str	r7, [r5, #0]
 8000f38:	2900      	cmp	r1, #0
 8000f3a:	d0cb      	beq.n	8000ed4 <__sflush_r+0x18>
 8000f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f40:	4299      	cmp	r1, r3
 8000f42:	d002      	beq.n	8000f4a <__sflush_r+0x8e>
 8000f44:	4628      	mov	r0, r5
 8000f46:	f000 f9d5 	bl	80012f4 <_free_r>
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	6360      	str	r0, [r4, #52]	; 0x34
 8000f4e:	e7c2      	b.n	8000ed6 <__sflush_r+0x1a>
 8000f50:	6a21      	ldr	r1, [r4, #32]
 8000f52:	2301      	movs	r3, #1
 8000f54:	4628      	mov	r0, r5
 8000f56:	47b0      	blx	r6
 8000f58:	1c41      	adds	r1, r0, #1
 8000f5a:	d1c7      	bne.n	8000eec <__sflush_r+0x30>
 8000f5c:	682b      	ldr	r3, [r5, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0c4      	beq.n	8000eec <__sflush_r+0x30>
 8000f62:	2b1d      	cmp	r3, #29
 8000f64:	d001      	beq.n	8000f6a <__sflush_r+0xae>
 8000f66:	2b16      	cmp	r3, #22
 8000f68:	d101      	bne.n	8000f6e <__sflush_r+0xb2>
 8000f6a:	602f      	str	r7, [r5, #0]
 8000f6c:	e7b2      	b.n	8000ed4 <__sflush_r+0x18>
 8000f6e:	89a3      	ldrh	r3, [r4, #12]
 8000f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f74:	81a3      	strh	r3, [r4, #12]
 8000f76:	e7ae      	b.n	8000ed6 <__sflush_r+0x1a>
 8000f78:	690f      	ldr	r7, [r1, #16]
 8000f7a:	2f00      	cmp	r7, #0
 8000f7c:	d0aa      	beq.n	8000ed4 <__sflush_r+0x18>
 8000f7e:	0793      	lsls	r3, r2, #30
 8000f80:	680e      	ldr	r6, [r1, #0]
 8000f82:	bf08      	it	eq
 8000f84:	694b      	ldreq	r3, [r1, #20]
 8000f86:	600f      	str	r7, [r1, #0]
 8000f88:	bf18      	it	ne
 8000f8a:	2300      	movne	r3, #0
 8000f8c:	1bf6      	subs	r6, r6, r7
 8000f8e:	608b      	str	r3, [r1, #8]
 8000f90:	2e00      	cmp	r6, #0
 8000f92:	dd9f      	ble.n	8000ed4 <__sflush_r+0x18>
 8000f94:	6a21      	ldr	r1, [r4, #32]
 8000f96:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000f9a:	4633      	mov	r3, r6
 8000f9c:	463a      	mov	r2, r7
 8000f9e:	4628      	mov	r0, r5
 8000fa0:	47e0      	blx	ip
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	dc06      	bgt.n	8000fb4 <__sflush_r+0xf8>
 8000fa6:	89a3      	ldrh	r3, [r4, #12]
 8000fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fac:	81a3      	strh	r3, [r4, #12]
 8000fae:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb2:	e790      	b.n	8000ed6 <__sflush_r+0x1a>
 8000fb4:	4407      	add	r7, r0
 8000fb6:	1a36      	subs	r6, r6, r0
 8000fb8:	e7ea      	b.n	8000f90 <__sflush_r+0xd4>
 8000fba:	bf00      	nop
 8000fbc:	20400001 	.word	0x20400001

08000fc0 <_fflush_r>:
 8000fc0:	b538      	push	{r3, r4, r5, lr}
 8000fc2:	690b      	ldr	r3, [r1, #16]
 8000fc4:	4605      	mov	r5, r0
 8000fc6:	460c      	mov	r4, r1
 8000fc8:	b913      	cbnz	r3, 8000fd0 <_fflush_r+0x10>
 8000fca:	2500      	movs	r5, #0
 8000fcc:	4628      	mov	r0, r5
 8000fce:	bd38      	pop	{r3, r4, r5, pc}
 8000fd0:	b118      	cbz	r0, 8000fda <_fflush_r+0x1a>
 8000fd2:	6983      	ldr	r3, [r0, #24]
 8000fd4:	b90b      	cbnz	r3, 8000fda <_fflush_r+0x1a>
 8000fd6:	f000 f887 	bl	80010e8 <__sinit>
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <_fflush_r+0x6c>)
 8000fdc:	429c      	cmp	r4, r3
 8000fde:	d11b      	bne.n	8001018 <_fflush_r+0x58>
 8000fe0:	686c      	ldr	r4, [r5, #4]
 8000fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0ef      	beq.n	8000fca <_fflush_r+0xa>
 8000fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000fec:	07d0      	lsls	r0, r2, #31
 8000fee:	d404      	bmi.n	8000ffa <_fflush_r+0x3a>
 8000ff0:	0599      	lsls	r1, r3, #22
 8000ff2:	d402      	bmi.n	8000ffa <_fflush_r+0x3a>
 8000ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ff6:	f000 f915 	bl	8001224 <__retarget_lock_acquire_recursive>
 8000ffa:	4628      	mov	r0, r5
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	f7ff ff5d 	bl	8000ebc <__sflush_r>
 8001002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001004:	07da      	lsls	r2, r3, #31
 8001006:	4605      	mov	r5, r0
 8001008:	d4e0      	bmi.n	8000fcc <_fflush_r+0xc>
 800100a:	89a3      	ldrh	r3, [r4, #12]
 800100c:	059b      	lsls	r3, r3, #22
 800100e:	d4dd      	bmi.n	8000fcc <_fflush_r+0xc>
 8001010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001012:	f000 f908 	bl	8001226 <__retarget_lock_release_recursive>
 8001016:	e7d9      	b.n	8000fcc <_fflush_r+0xc>
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <_fflush_r+0x70>)
 800101a:	429c      	cmp	r4, r3
 800101c:	d101      	bne.n	8001022 <_fflush_r+0x62>
 800101e:	68ac      	ldr	r4, [r5, #8]
 8001020:	e7df      	b.n	8000fe2 <_fflush_r+0x22>
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <_fflush_r+0x74>)
 8001024:	429c      	cmp	r4, r3
 8001026:	bf08      	it	eq
 8001028:	68ec      	ldreq	r4, [r5, #12]
 800102a:	e7da      	b.n	8000fe2 <_fflush_r+0x22>
 800102c:	0800169c 	.word	0x0800169c
 8001030:	080016bc 	.word	0x080016bc
 8001034:	0800167c 	.word	0x0800167c

08001038 <std>:
 8001038:	2300      	movs	r3, #0
 800103a:	b510      	push	{r4, lr}
 800103c:	4604      	mov	r4, r0
 800103e:	e9c0 3300 	strd	r3, r3, [r0]
 8001042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001046:	6083      	str	r3, [r0, #8]
 8001048:	8181      	strh	r1, [r0, #12]
 800104a:	6643      	str	r3, [r0, #100]	; 0x64
 800104c:	81c2      	strh	r2, [r0, #14]
 800104e:	6183      	str	r3, [r0, #24]
 8001050:	4619      	mov	r1, r3
 8001052:	2208      	movs	r2, #8
 8001054:	305c      	adds	r0, #92	; 0x5c
 8001056:	f7ff fdf3 	bl	8000c40 <memset>
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <std+0x38>)
 800105c:	6263      	str	r3, [r4, #36]	; 0x24
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <std+0x3c>)
 8001060:	62a3      	str	r3, [r4, #40]	; 0x28
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <std+0x40>)
 8001064:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001066:	4b05      	ldr	r3, [pc, #20]	; (800107c <std+0x44>)
 8001068:	6224      	str	r4, [r4, #32]
 800106a:	6323      	str	r3, [r4, #48]	; 0x30
 800106c:	bd10      	pop	{r4, pc}
 800106e:	bf00      	nop
 8001070:	080014d1 	.word	0x080014d1
 8001074:	080014f3 	.word	0x080014f3
 8001078:	0800152b 	.word	0x0800152b
 800107c:	0800154f 	.word	0x0800154f

08001080 <_cleanup_r>:
 8001080:	4901      	ldr	r1, [pc, #4]	; (8001088 <_cleanup_r+0x8>)
 8001082:	f000 b8af 	b.w	80011e4 <_fwalk_reent>
 8001086:	bf00      	nop
 8001088:	08000fc1 	.word	0x08000fc1

0800108c <__sfmoreglue>:
 800108c:	b570      	push	{r4, r5, r6, lr}
 800108e:	2268      	movs	r2, #104	; 0x68
 8001090:	1e4d      	subs	r5, r1, #1
 8001092:	4355      	muls	r5, r2
 8001094:	460e      	mov	r6, r1
 8001096:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800109a:	f000 f995 	bl	80013c8 <_malloc_r>
 800109e:	4604      	mov	r4, r0
 80010a0:	b140      	cbz	r0, 80010b4 <__sfmoreglue+0x28>
 80010a2:	2100      	movs	r1, #0
 80010a4:	e9c0 1600 	strd	r1, r6, [r0]
 80010a8:	300c      	adds	r0, #12
 80010aa:	60a0      	str	r0, [r4, #8]
 80010ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80010b0:	f7ff fdc6 	bl	8000c40 <memset>
 80010b4:	4620      	mov	r0, r4
 80010b6:	bd70      	pop	{r4, r5, r6, pc}

080010b8 <__sfp_lock_acquire>:
 80010b8:	4801      	ldr	r0, [pc, #4]	; (80010c0 <__sfp_lock_acquire+0x8>)
 80010ba:	f000 b8b3 	b.w	8001224 <__retarget_lock_acquire_recursive>
 80010be:	bf00      	nop
 80010c0:	20000085 	.word	0x20000085

080010c4 <__sfp_lock_release>:
 80010c4:	4801      	ldr	r0, [pc, #4]	; (80010cc <__sfp_lock_release+0x8>)
 80010c6:	f000 b8ae 	b.w	8001226 <__retarget_lock_release_recursive>
 80010ca:	bf00      	nop
 80010cc:	20000085 	.word	0x20000085

080010d0 <__sinit_lock_acquire>:
 80010d0:	4801      	ldr	r0, [pc, #4]	; (80010d8 <__sinit_lock_acquire+0x8>)
 80010d2:	f000 b8a7 	b.w	8001224 <__retarget_lock_acquire_recursive>
 80010d6:	bf00      	nop
 80010d8:	20000086 	.word	0x20000086

080010dc <__sinit_lock_release>:
 80010dc:	4801      	ldr	r0, [pc, #4]	; (80010e4 <__sinit_lock_release+0x8>)
 80010de:	f000 b8a2 	b.w	8001226 <__retarget_lock_release_recursive>
 80010e2:	bf00      	nop
 80010e4:	20000086 	.word	0x20000086

080010e8 <__sinit>:
 80010e8:	b510      	push	{r4, lr}
 80010ea:	4604      	mov	r4, r0
 80010ec:	f7ff fff0 	bl	80010d0 <__sinit_lock_acquire>
 80010f0:	69a3      	ldr	r3, [r4, #24]
 80010f2:	b11b      	cbz	r3, 80010fc <__sinit+0x14>
 80010f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010f8:	f7ff bff0 	b.w	80010dc <__sinit_lock_release>
 80010fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001100:	6523      	str	r3, [r4, #80]	; 0x50
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <__sinit+0x68>)
 8001104:	4a13      	ldr	r2, [pc, #76]	; (8001154 <__sinit+0x6c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	62a2      	str	r2, [r4, #40]	; 0x28
 800110a:	42a3      	cmp	r3, r4
 800110c:	bf04      	itt	eq
 800110e:	2301      	moveq	r3, #1
 8001110:	61a3      	streq	r3, [r4, #24]
 8001112:	4620      	mov	r0, r4
 8001114:	f000 f820 	bl	8001158 <__sfp>
 8001118:	6060      	str	r0, [r4, #4]
 800111a:	4620      	mov	r0, r4
 800111c:	f000 f81c 	bl	8001158 <__sfp>
 8001120:	60a0      	str	r0, [r4, #8]
 8001122:	4620      	mov	r0, r4
 8001124:	f000 f818 	bl	8001158 <__sfp>
 8001128:	2200      	movs	r2, #0
 800112a:	60e0      	str	r0, [r4, #12]
 800112c:	2104      	movs	r1, #4
 800112e:	6860      	ldr	r0, [r4, #4]
 8001130:	f7ff ff82 	bl	8001038 <std>
 8001134:	68a0      	ldr	r0, [r4, #8]
 8001136:	2201      	movs	r2, #1
 8001138:	2109      	movs	r1, #9
 800113a:	f7ff ff7d 	bl	8001038 <std>
 800113e:	68e0      	ldr	r0, [r4, #12]
 8001140:	2202      	movs	r2, #2
 8001142:	2112      	movs	r1, #18
 8001144:	f7ff ff78 	bl	8001038 <std>
 8001148:	2301      	movs	r3, #1
 800114a:	61a3      	str	r3, [r4, #24]
 800114c:	e7d2      	b.n	80010f4 <__sinit+0xc>
 800114e:	bf00      	nop
 8001150:	08001678 	.word	0x08001678
 8001154:	08001081 	.word	0x08001081

08001158 <__sfp>:
 8001158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115a:	4607      	mov	r7, r0
 800115c:	f7ff ffac 	bl	80010b8 <__sfp_lock_acquire>
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <__sfp+0x84>)
 8001162:	681e      	ldr	r6, [r3, #0]
 8001164:	69b3      	ldr	r3, [r6, #24]
 8001166:	b913      	cbnz	r3, 800116e <__sfp+0x16>
 8001168:	4630      	mov	r0, r6
 800116a:	f7ff ffbd 	bl	80010e8 <__sinit>
 800116e:	3648      	adds	r6, #72	; 0x48
 8001170:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001174:	3b01      	subs	r3, #1
 8001176:	d503      	bpl.n	8001180 <__sfp+0x28>
 8001178:	6833      	ldr	r3, [r6, #0]
 800117a:	b30b      	cbz	r3, 80011c0 <__sfp+0x68>
 800117c:	6836      	ldr	r6, [r6, #0]
 800117e:	e7f7      	b.n	8001170 <__sfp+0x18>
 8001180:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001184:	b9d5      	cbnz	r5, 80011bc <__sfp+0x64>
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <__sfp+0x88>)
 8001188:	60e3      	str	r3, [r4, #12]
 800118a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800118e:	6665      	str	r5, [r4, #100]	; 0x64
 8001190:	f000 f847 	bl	8001222 <__retarget_lock_init_recursive>
 8001194:	f7ff ff96 	bl	80010c4 <__sfp_lock_release>
 8001198:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800119c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80011a0:	6025      	str	r5, [r4, #0]
 80011a2:	61a5      	str	r5, [r4, #24]
 80011a4:	2208      	movs	r2, #8
 80011a6:	4629      	mov	r1, r5
 80011a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80011ac:	f7ff fd48 	bl	8000c40 <memset>
 80011b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80011b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80011b8:	4620      	mov	r0, r4
 80011ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011bc:	3468      	adds	r4, #104	; 0x68
 80011be:	e7d9      	b.n	8001174 <__sfp+0x1c>
 80011c0:	2104      	movs	r1, #4
 80011c2:	4638      	mov	r0, r7
 80011c4:	f7ff ff62 	bl	800108c <__sfmoreglue>
 80011c8:	4604      	mov	r4, r0
 80011ca:	6030      	str	r0, [r6, #0]
 80011cc:	2800      	cmp	r0, #0
 80011ce:	d1d5      	bne.n	800117c <__sfp+0x24>
 80011d0:	f7ff ff78 	bl	80010c4 <__sfp_lock_release>
 80011d4:	230c      	movs	r3, #12
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	e7ee      	b.n	80011b8 <__sfp+0x60>
 80011da:	bf00      	nop
 80011dc:	08001678 	.word	0x08001678
 80011e0:	ffff0001 	.word	0xffff0001

080011e4 <_fwalk_reent>:
 80011e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011e8:	4606      	mov	r6, r0
 80011ea:	4688      	mov	r8, r1
 80011ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80011f0:	2700      	movs	r7, #0
 80011f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80011f6:	f1b9 0901 	subs.w	r9, r9, #1
 80011fa:	d505      	bpl.n	8001208 <_fwalk_reent+0x24>
 80011fc:	6824      	ldr	r4, [r4, #0]
 80011fe:	2c00      	cmp	r4, #0
 8001200:	d1f7      	bne.n	80011f2 <_fwalk_reent+0xe>
 8001202:	4638      	mov	r0, r7
 8001204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001208:	89ab      	ldrh	r3, [r5, #12]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d907      	bls.n	800121e <_fwalk_reent+0x3a>
 800120e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001212:	3301      	adds	r3, #1
 8001214:	d003      	beq.n	800121e <_fwalk_reent+0x3a>
 8001216:	4629      	mov	r1, r5
 8001218:	4630      	mov	r0, r6
 800121a:	47c0      	blx	r8
 800121c:	4307      	orrs	r7, r0
 800121e:	3568      	adds	r5, #104	; 0x68
 8001220:	e7e9      	b.n	80011f6 <_fwalk_reent+0x12>

08001222 <__retarget_lock_init_recursive>:
 8001222:	4770      	bx	lr

08001224 <__retarget_lock_acquire_recursive>:
 8001224:	4770      	bx	lr

08001226 <__retarget_lock_release_recursive>:
 8001226:	4770      	bx	lr

08001228 <__swhatbuf_r>:
 8001228:	b570      	push	{r4, r5, r6, lr}
 800122a:	460e      	mov	r6, r1
 800122c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001230:	2900      	cmp	r1, #0
 8001232:	b096      	sub	sp, #88	; 0x58
 8001234:	4614      	mov	r4, r2
 8001236:	461d      	mov	r5, r3
 8001238:	da08      	bge.n	800124c <__swhatbuf_r+0x24>
 800123a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	602a      	str	r2, [r5, #0]
 8001242:	061a      	lsls	r2, r3, #24
 8001244:	d410      	bmi.n	8001268 <__swhatbuf_r+0x40>
 8001246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800124a:	e00e      	b.n	800126a <__swhatbuf_r+0x42>
 800124c:	466a      	mov	r2, sp
 800124e:	f000 f9a5 	bl	800159c <_fstat_r>
 8001252:	2800      	cmp	r0, #0
 8001254:	dbf1      	blt.n	800123a <__swhatbuf_r+0x12>
 8001256:	9a01      	ldr	r2, [sp, #4]
 8001258:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800125c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001260:	425a      	negs	r2, r3
 8001262:	415a      	adcs	r2, r3
 8001264:	602a      	str	r2, [r5, #0]
 8001266:	e7ee      	b.n	8001246 <__swhatbuf_r+0x1e>
 8001268:	2340      	movs	r3, #64	; 0x40
 800126a:	2000      	movs	r0, #0
 800126c:	6023      	str	r3, [r4, #0]
 800126e:	b016      	add	sp, #88	; 0x58
 8001270:	bd70      	pop	{r4, r5, r6, pc}
	...

08001274 <__smakebuf_r>:
 8001274:	898b      	ldrh	r3, [r1, #12]
 8001276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001278:	079d      	lsls	r5, r3, #30
 800127a:	4606      	mov	r6, r0
 800127c:	460c      	mov	r4, r1
 800127e:	d507      	bpl.n	8001290 <__smakebuf_r+0x1c>
 8001280:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001284:	6023      	str	r3, [r4, #0]
 8001286:	6123      	str	r3, [r4, #16]
 8001288:	2301      	movs	r3, #1
 800128a:	6163      	str	r3, [r4, #20]
 800128c:	b002      	add	sp, #8
 800128e:	bd70      	pop	{r4, r5, r6, pc}
 8001290:	ab01      	add	r3, sp, #4
 8001292:	466a      	mov	r2, sp
 8001294:	f7ff ffc8 	bl	8001228 <__swhatbuf_r>
 8001298:	9900      	ldr	r1, [sp, #0]
 800129a:	4605      	mov	r5, r0
 800129c:	4630      	mov	r0, r6
 800129e:	f000 f893 	bl	80013c8 <_malloc_r>
 80012a2:	b948      	cbnz	r0, 80012b8 <__smakebuf_r+0x44>
 80012a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012a8:	059a      	lsls	r2, r3, #22
 80012aa:	d4ef      	bmi.n	800128c <__smakebuf_r+0x18>
 80012ac:	f023 0303 	bic.w	r3, r3, #3
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	81a3      	strh	r3, [r4, #12]
 80012b6:	e7e3      	b.n	8001280 <__smakebuf_r+0xc>
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <__smakebuf_r+0x7c>)
 80012ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80012bc:	89a3      	ldrh	r3, [r4, #12]
 80012be:	6020      	str	r0, [r4, #0]
 80012c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c4:	81a3      	strh	r3, [r4, #12]
 80012c6:	9b00      	ldr	r3, [sp, #0]
 80012c8:	6163      	str	r3, [r4, #20]
 80012ca:	9b01      	ldr	r3, [sp, #4]
 80012cc:	6120      	str	r0, [r4, #16]
 80012ce:	b15b      	cbz	r3, 80012e8 <__smakebuf_r+0x74>
 80012d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012d4:	4630      	mov	r0, r6
 80012d6:	f000 f973 	bl	80015c0 <_isatty_r>
 80012da:	b128      	cbz	r0, 80012e8 <__smakebuf_r+0x74>
 80012dc:	89a3      	ldrh	r3, [r4, #12]
 80012de:	f023 0303 	bic.w	r3, r3, #3
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	81a3      	strh	r3, [r4, #12]
 80012e8:	89a0      	ldrh	r0, [r4, #12]
 80012ea:	4305      	orrs	r5, r0
 80012ec:	81a5      	strh	r5, [r4, #12]
 80012ee:	e7cd      	b.n	800128c <__smakebuf_r+0x18>
 80012f0:	08001081 	.word	0x08001081

080012f4 <_free_r>:
 80012f4:	b538      	push	{r3, r4, r5, lr}
 80012f6:	4605      	mov	r5, r0
 80012f8:	2900      	cmp	r1, #0
 80012fa:	d041      	beq.n	8001380 <_free_r+0x8c>
 80012fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001300:	1f0c      	subs	r4, r1, #4
 8001302:	2b00      	cmp	r3, #0
 8001304:	bfb8      	it	lt
 8001306:	18e4      	addlt	r4, r4, r3
 8001308:	f000 f97c 	bl	8001604 <__malloc_lock>
 800130c:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <_free_r+0x90>)
 800130e:	6813      	ldr	r3, [r2, #0]
 8001310:	b933      	cbnz	r3, 8001320 <_free_r+0x2c>
 8001312:	6063      	str	r3, [r4, #4]
 8001314:	6014      	str	r4, [r2, #0]
 8001316:	4628      	mov	r0, r5
 8001318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800131c:	f000 b978 	b.w	8001610 <__malloc_unlock>
 8001320:	42a3      	cmp	r3, r4
 8001322:	d908      	bls.n	8001336 <_free_r+0x42>
 8001324:	6820      	ldr	r0, [r4, #0]
 8001326:	1821      	adds	r1, r4, r0
 8001328:	428b      	cmp	r3, r1
 800132a:	bf01      	itttt	eq
 800132c:	6819      	ldreq	r1, [r3, #0]
 800132e:	685b      	ldreq	r3, [r3, #4]
 8001330:	1809      	addeq	r1, r1, r0
 8001332:	6021      	streq	r1, [r4, #0]
 8001334:	e7ed      	b.n	8001312 <_free_r+0x1e>
 8001336:	461a      	mov	r2, r3
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	b10b      	cbz	r3, 8001340 <_free_r+0x4c>
 800133c:	42a3      	cmp	r3, r4
 800133e:	d9fa      	bls.n	8001336 <_free_r+0x42>
 8001340:	6811      	ldr	r1, [r2, #0]
 8001342:	1850      	adds	r0, r2, r1
 8001344:	42a0      	cmp	r0, r4
 8001346:	d10b      	bne.n	8001360 <_free_r+0x6c>
 8001348:	6820      	ldr	r0, [r4, #0]
 800134a:	4401      	add	r1, r0
 800134c:	1850      	adds	r0, r2, r1
 800134e:	4283      	cmp	r3, r0
 8001350:	6011      	str	r1, [r2, #0]
 8001352:	d1e0      	bne.n	8001316 <_free_r+0x22>
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	6053      	str	r3, [r2, #4]
 800135a:	4401      	add	r1, r0
 800135c:	6011      	str	r1, [r2, #0]
 800135e:	e7da      	b.n	8001316 <_free_r+0x22>
 8001360:	d902      	bls.n	8001368 <_free_r+0x74>
 8001362:	230c      	movs	r3, #12
 8001364:	602b      	str	r3, [r5, #0]
 8001366:	e7d6      	b.n	8001316 <_free_r+0x22>
 8001368:	6820      	ldr	r0, [r4, #0]
 800136a:	1821      	adds	r1, r4, r0
 800136c:	428b      	cmp	r3, r1
 800136e:	bf04      	itt	eq
 8001370:	6819      	ldreq	r1, [r3, #0]
 8001372:	685b      	ldreq	r3, [r3, #4]
 8001374:	6063      	str	r3, [r4, #4]
 8001376:	bf04      	itt	eq
 8001378:	1809      	addeq	r1, r1, r0
 800137a:	6021      	streq	r1, [r4, #0]
 800137c:	6054      	str	r4, [r2, #4]
 800137e:	e7ca      	b.n	8001316 <_free_r+0x22>
 8001380:	bd38      	pop	{r3, r4, r5, pc}
 8001382:	bf00      	nop
 8001384:	20000088 	.word	0x20000088

08001388 <sbrk_aligned>:
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	4e0e      	ldr	r6, [pc, #56]	; (80013c4 <sbrk_aligned+0x3c>)
 800138c:	460c      	mov	r4, r1
 800138e:	6831      	ldr	r1, [r6, #0]
 8001390:	4605      	mov	r5, r0
 8001392:	b911      	cbnz	r1, 800139a <sbrk_aligned+0x12>
 8001394:	f000 f88c 	bl	80014b0 <_sbrk_r>
 8001398:	6030      	str	r0, [r6, #0]
 800139a:	4621      	mov	r1, r4
 800139c:	4628      	mov	r0, r5
 800139e:	f000 f887 	bl	80014b0 <_sbrk_r>
 80013a2:	1c43      	adds	r3, r0, #1
 80013a4:	d00a      	beq.n	80013bc <sbrk_aligned+0x34>
 80013a6:	1cc4      	adds	r4, r0, #3
 80013a8:	f024 0403 	bic.w	r4, r4, #3
 80013ac:	42a0      	cmp	r0, r4
 80013ae:	d007      	beq.n	80013c0 <sbrk_aligned+0x38>
 80013b0:	1a21      	subs	r1, r4, r0
 80013b2:	4628      	mov	r0, r5
 80013b4:	f000 f87c 	bl	80014b0 <_sbrk_r>
 80013b8:	3001      	adds	r0, #1
 80013ba:	d101      	bne.n	80013c0 <sbrk_aligned+0x38>
 80013bc:	f04f 34ff 	mov.w	r4, #4294967295
 80013c0:	4620      	mov	r0, r4
 80013c2:	bd70      	pop	{r4, r5, r6, pc}
 80013c4:	2000008c 	.word	0x2000008c

080013c8 <_malloc_r>:
 80013c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013cc:	1ccd      	adds	r5, r1, #3
 80013ce:	f025 0503 	bic.w	r5, r5, #3
 80013d2:	3508      	adds	r5, #8
 80013d4:	2d0c      	cmp	r5, #12
 80013d6:	bf38      	it	cc
 80013d8:	250c      	movcc	r5, #12
 80013da:	2d00      	cmp	r5, #0
 80013dc:	4607      	mov	r7, r0
 80013de:	db01      	blt.n	80013e4 <_malloc_r+0x1c>
 80013e0:	42a9      	cmp	r1, r5
 80013e2:	d905      	bls.n	80013f0 <_malloc_r+0x28>
 80013e4:	230c      	movs	r3, #12
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	2600      	movs	r6, #0
 80013ea:	4630      	mov	r0, r6
 80013ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013f0:	4e2e      	ldr	r6, [pc, #184]	; (80014ac <_malloc_r+0xe4>)
 80013f2:	f000 f907 	bl	8001604 <__malloc_lock>
 80013f6:	6833      	ldr	r3, [r6, #0]
 80013f8:	461c      	mov	r4, r3
 80013fa:	bb34      	cbnz	r4, 800144a <_malloc_r+0x82>
 80013fc:	4629      	mov	r1, r5
 80013fe:	4638      	mov	r0, r7
 8001400:	f7ff ffc2 	bl	8001388 <sbrk_aligned>
 8001404:	1c43      	adds	r3, r0, #1
 8001406:	4604      	mov	r4, r0
 8001408:	d14d      	bne.n	80014a6 <_malloc_r+0xde>
 800140a:	6834      	ldr	r4, [r6, #0]
 800140c:	4626      	mov	r6, r4
 800140e:	2e00      	cmp	r6, #0
 8001410:	d140      	bne.n	8001494 <_malloc_r+0xcc>
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	4631      	mov	r1, r6
 8001416:	4638      	mov	r0, r7
 8001418:	eb04 0803 	add.w	r8, r4, r3
 800141c:	f000 f848 	bl	80014b0 <_sbrk_r>
 8001420:	4580      	cmp	r8, r0
 8001422:	d13a      	bne.n	800149a <_malloc_r+0xd2>
 8001424:	6821      	ldr	r1, [r4, #0]
 8001426:	3503      	adds	r5, #3
 8001428:	1a6d      	subs	r5, r5, r1
 800142a:	f025 0503 	bic.w	r5, r5, #3
 800142e:	3508      	adds	r5, #8
 8001430:	2d0c      	cmp	r5, #12
 8001432:	bf38      	it	cc
 8001434:	250c      	movcc	r5, #12
 8001436:	4629      	mov	r1, r5
 8001438:	4638      	mov	r0, r7
 800143a:	f7ff ffa5 	bl	8001388 <sbrk_aligned>
 800143e:	3001      	adds	r0, #1
 8001440:	d02b      	beq.n	800149a <_malloc_r+0xd2>
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	442b      	add	r3, r5
 8001446:	6023      	str	r3, [r4, #0]
 8001448:	e00e      	b.n	8001468 <_malloc_r+0xa0>
 800144a:	6822      	ldr	r2, [r4, #0]
 800144c:	1b52      	subs	r2, r2, r5
 800144e:	d41e      	bmi.n	800148e <_malloc_r+0xc6>
 8001450:	2a0b      	cmp	r2, #11
 8001452:	d916      	bls.n	8001482 <_malloc_r+0xba>
 8001454:	1961      	adds	r1, r4, r5
 8001456:	42a3      	cmp	r3, r4
 8001458:	6025      	str	r5, [r4, #0]
 800145a:	bf18      	it	ne
 800145c:	6059      	strne	r1, [r3, #4]
 800145e:	6863      	ldr	r3, [r4, #4]
 8001460:	bf08      	it	eq
 8001462:	6031      	streq	r1, [r6, #0]
 8001464:	5162      	str	r2, [r4, r5]
 8001466:	604b      	str	r3, [r1, #4]
 8001468:	4638      	mov	r0, r7
 800146a:	f104 060b 	add.w	r6, r4, #11
 800146e:	f000 f8cf 	bl	8001610 <__malloc_unlock>
 8001472:	f026 0607 	bic.w	r6, r6, #7
 8001476:	1d23      	adds	r3, r4, #4
 8001478:	1af2      	subs	r2, r6, r3
 800147a:	d0b6      	beq.n	80013ea <_malloc_r+0x22>
 800147c:	1b9b      	subs	r3, r3, r6
 800147e:	50a3      	str	r3, [r4, r2]
 8001480:	e7b3      	b.n	80013ea <_malloc_r+0x22>
 8001482:	6862      	ldr	r2, [r4, #4]
 8001484:	42a3      	cmp	r3, r4
 8001486:	bf0c      	ite	eq
 8001488:	6032      	streq	r2, [r6, #0]
 800148a:	605a      	strne	r2, [r3, #4]
 800148c:	e7ec      	b.n	8001468 <_malloc_r+0xa0>
 800148e:	4623      	mov	r3, r4
 8001490:	6864      	ldr	r4, [r4, #4]
 8001492:	e7b2      	b.n	80013fa <_malloc_r+0x32>
 8001494:	4634      	mov	r4, r6
 8001496:	6876      	ldr	r6, [r6, #4]
 8001498:	e7b9      	b.n	800140e <_malloc_r+0x46>
 800149a:	230c      	movs	r3, #12
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4638      	mov	r0, r7
 80014a0:	f000 f8b6 	bl	8001610 <__malloc_unlock>
 80014a4:	e7a1      	b.n	80013ea <_malloc_r+0x22>
 80014a6:	6025      	str	r5, [r4, #0]
 80014a8:	e7de      	b.n	8001468 <_malloc_r+0xa0>
 80014aa:	bf00      	nop
 80014ac:	20000088 	.word	0x20000088

080014b0 <_sbrk_r>:
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	4d06      	ldr	r5, [pc, #24]	; (80014cc <_sbrk_r+0x1c>)
 80014b4:	2300      	movs	r3, #0
 80014b6:	4604      	mov	r4, r0
 80014b8:	4608      	mov	r0, r1
 80014ba:	602b      	str	r3, [r5, #0]
 80014bc:	f7fe ff9c 	bl	80003f8 <_sbrk>
 80014c0:	1c43      	adds	r3, r0, #1
 80014c2:	d102      	bne.n	80014ca <_sbrk_r+0x1a>
 80014c4:	682b      	ldr	r3, [r5, #0]
 80014c6:	b103      	cbz	r3, 80014ca <_sbrk_r+0x1a>
 80014c8:	6023      	str	r3, [r4, #0]
 80014ca:	bd38      	pop	{r3, r4, r5, pc}
 80014cc:	20000090 	.word	0x20000090

080014d0 <__sread>:
 80014d0:	b510      	push	{r4, lr}
 80014d2:	460c      	mov	r4, r1
 80014d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014d8:	f000 f8a0 	bl	800161c <_read_r>
 80014dc:	2800      	cmp	r0, #0
 80014de:	bfab      	itete	ge
 80014e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80014e2:	89a3      	ldrhlt	r3, [r4, #12]
 80014e4:	181b      	addge	r3, r3, r0
 80014e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80014ea:	bfac      	ite	ge
 80014ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80014ee:	81a3      	strhlt	r3, [r4, #12]
 80014f0:	bd10      	pop	{r4, pc}

080014f2 <__swrite>:
 80014f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014f6:	461f      	mov	r7, r3
 80014f8:	898b      	ldrh	r3, [r1, #12]
 80014fa:	05db      	lsls	r3, r3, #23
 80014fc:	4605      	mov	r5, r0
 80014fe:	460c      	mov	r4, r1
 8001500:	4616      	mov	r6, r2
 8001502:	d505      	bpl.n	8001510 <__swrite+0x1e>
 8001504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001508:	2302      	movs	r3, #2
 800150a:	2200      	movs	r2, #0
 800150c:	f000 f868 	bl	80015e0 <_lseek_r>
 8001510:	89a3      	ldrh	r3, [r4, #12]
 8001512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800151a:	81a3      	strh	r3, [r4, #12]
 800151c:	4632      	mov	r2, r6
 800151e:	463b      	mov	r3, r7
 8001520:	4628      	mov	r0, r5
 8001522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001526:	f000 b817 	b.w	8001558 <_write_r>

0800152a <__sseek>:
 800152a:	b510      	push	{r4, lr}
 800152c:	460c      	mov	r4, r1
 800152e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001532:	f000 f855 	bl	80015e0 <_lseek_r>
 8001536:	1c43      	adds	r3, r0, #1
 8001538:	89a3      	ldrh	r3, [r4, #12]
 800153a:	bf15      	itete	ne
 800153c:	6560      	strne	r0, [r4, #84]	; 0x54
 800153e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001542:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001546:	81a3      	strheq	r3, [r4, #12]
 8001548:	bf18      	it	ne
 800154a:	81a3      	strhne	r3, [r4, #12]
 800154c:	bd10      	pop	{r4, pc}

0800154e <__sclose>:
 800154e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001552:	f000 b813 	b.w	800157c <_close_r>
	...

08001558 <_write_r>:
 8001558:	b538      	push	{r3, r4, r5, lr}
 800155a:	4d07      	ldr	r5, [pc, #28]	; (8001578 <_write_r+0x20>)
 800155c:	4604      	mov	r4, r0
 800155e:	4608      	mov	r0, r1
 8001560:	4611      	mov	r1, r2
 8001562:	2200      	movs	r2, #0
 8001564:	602a      	str	r2, [r5, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	f7fe fef9 	bl	800035e <_write>
 800156c:	1c43      	adds	r3, r0, #1
 800156e:	d102      	bne.n	8001576 <_write_r+0x1e>
 8001570:	682b      	ldr	r3, [r5, #0]
 8001572:	b103      	cbz	r3, 8001576 <_write_r+0x1e>
 8001574:	6023      	str	r3, [r4, #0]
 8001576:	bd38      	pop	{r3, r4, r5, pc}
 8001578:	20000090 	.word	0x20000090

0800157c <_close_r>:
 800157c:	b538      	push	{r3, r4, r5, lr}
 800157e:	4d06      	ldr	r5, [pc, #24]	; (8001598 <_close_r+0x1c>)
 8001580:	2300      	movs	r3, #0
 8001582:	4604      	mov	r4, r0
 8001584:	4608      	mov	r0, r1
 8001586:	602b      	str	r3, [r5, #0]
 8001588:	f7fe ff05 	bl	8000396 <_close>
 800158c:	1c43      	adds	r3, r0, #1
 800158e:	d102      	bne.n	8001596 <_close_r+0x1a>
 8001590:	682b      	ldr	r3, [r5, #0]
 8001592:	b103      	cbz	r3, 8001596 <_close_r+0x1a>
 8001594:	6023      	str	r3, [r4, #0]
 8001596:	bd38      	pop	{r3, r4, r5, pc}
 8001598:	20000090 	.word	0x20000090

0800159c <_fstat_r>:
 800159c:	b538      	push	{r3, r4, r5, lr}
 800159e:	4d07      	ldr	r5, [pc, #28]	; (80015bc <_fstat_r+0x20>)
 80015a0:	2300      	movs	r3, #0
 80015a2:	4604      	mov	r4, r0
 80015a4:	4608      	mov	r0, r1
 80015a6:	4611      	mov	r1, r2
 80015a8:	602b      	str	r3, [r5, #0]
 80015aa:	f7fe feff 	bl	80003ac <_fstat>
 80015ae:	1c43      	adds	r3, r0, #1
 80015b0:	d102      	bne.n	80015b8 <_fstat_r+0x1c>
 80015b2:	682b      	ldr	r3, [r5, #0]
 80015b4:	b103      	cbz	r3, 80015b8 <_fstat_r+0x1c>
 80015b6:	6023      	str	r3, [r4, #0]
 80015b8:	bd38      	pop	{r3, r4, r5, pc}
 80015ba:	bf00      	nop
 80015bc:	20000090 	.word	0x20000090

080015c0 <_isatty_r>:
 80015c0:	b538      	push	{r3, r4, r5, lr}
 80015c2:	4d06      	ldr	r5, [pc, #24]	; (80015dc <_isatty_r+0x1c>)
 80015c4:	2300      	movs	r3, #0
 80015c6:	4604      	mov	r4, r0
 80015c8:	4608      	mov	r0, r1
 80015ca:	602b      	str	r3, [r5, #0]
 80015cc:	f7fe fefd 	bl	80003ca <_isatty>
 80015d0:	1c43      	adds	r3, r0, #1
 80015d2:	d102      	bne.n	80015da <_isatty_r+0x1a>
 80015d4:	682b      	ldr	r3, [r5, #0]
 80015d6:	b103      	cbz	r3, 80015da <_isatty_r+0x1a>
 80015d8:	6023      	str	r3, [r4, #0]
 80015da:	bd38      	pop	{r3, r4, r5, pc}
 80015dc:	20000090 	.word	0x20000090

080015e0 <_lseek_r>:
 80015e0:	b538      	push	{r3, r4, r5, lr}
 80015e2:	4d07      	ldr	r5, [pc, #28]	; (8001600 <_lseek_r+0x20>)
 80015e4:	4604      	mov	r4, r0
 80015e6:	4608      	mov	r0, r1
 80015e8:	4611      	mov	r1, r2
 80015ea:	2200      	movs	r2, #0
 80015ec:	602a      	str	r2, [r5, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	f7fe fef5 	bl	80003de <_lseek>
 80015f4:	1c43      	adds	r3, r0, #1
 80015f6:	d102      	bne.n	80015fe <_lseek_r+0x1e>
 80015f8:	682b      	ldr	r3, [r5, #0]
 80015fa:	b103      	cbz	r3, 80015fe <_lseek_r+0x1e>
 80015fc:	6023      	str	r3, [r4, #0]
 80015fe:	bd38      	pop	{r3, r4, r5, pc}
 8001600:	20000090 	.word	0x20000090

08001604 <__malloc_lock>:
 8001604:	4801      	ldr	r0, [pc, #4]	; (800160c <__malloc_lock+0x8>)
 8001606:	f7ff be0d 	b.w	8001224 <__retarget_lock_acquire_recursive>
 800160a:	bf00      	nop
 800160c:	20000084 	.word	0x20000084

08001610 <__malloc_unlock>:
 8001610:	4801      	ldr	r0, [pc, #4]	; (8001618 <__malloc_unlock+0x8>)
 8001612:	f7ff be08 	b.w	8001226 <__retarget_lock_release_recursive>
 8001616:	bf00      	nop
 8001618:	20000084 	.word	0x20000084

0800161c <_read_r>:
 800161c:	b538      	push	{r3, r4, r5, lr}
 800161e:	4d07      	ldr	r5, [pc, #28]	; (800163c <_read_r+0x20>)
 8001620:	4604      	mov	r4, r0
 8001622:	4608      	mov	r0, r1
 8001624:	4611      	mov	r1, r2
 8001626:	2200      	movs	r2, #0
 8001628:	602a      	str	r2, [r5, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	f7fe fe7a 	bl	8000324 <_read>
 8001630:	1c43      	adds	r3, r0, #1
 8001632:	d102      	bne.n	800163a <_read_r+0x1e>
 8001634:	682b      	ldr	r3, [r5, #0]
 8001636:	b103      	cbz	r3, 800163a <_read_r+0x1e>
 8001638:	6023      	str	r3, [r4, #0]
 800163a:	bd38      	pop	{r3, r4, r5, pc}
 800163c:	20000090 	.word	0x20000090

08001640 <_init>:
 8001640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001642:	bf00      	nop
 8001644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001646:	bc08      	pop	{r3}
 8001648:	469e      	mov	lr, r3
 800164a:	4770      	bx	lr

0800164c <_fini>:
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164e:	bf00      	nop
 8001650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001652:	bc08      	pop	{r3}
 8001654:	469e      	mov	lr, r3
 8001656:	4770      	bx	lr
