
GPIO_driver_rev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001550  08001550  00011550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015d0  080015d0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080015d0  080015d0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015d0  080015d0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015d0  080015d0  000115d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015d4  080015d4  000115d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080015d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  0800163c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  0800163c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012ba  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004ef  00000000  00000000  00021348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00021838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  000219d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003391  00000000  00000000  00021b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001bb9  00000000  00000000  00024eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000aa8d  00000000  00000000  00026a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000314f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c20  00000000  00000000  00031548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001538 	.word	0x08001538

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	08001538 	.word	0x08001538

080001d8 <GPIO_Configure>:

#include <stdint.h>
#include"stm32f411xx.h"
#include<stdio.h>
void GPIO_Configure()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t led;
	led.pGPIOx=GPIOC;
 80001de:	4b18      	ldr	r3, [pc, #96]	; (8000240 <GPIO_Configure+0x68>)
 80001e0:	60fb      	str	r3, [r7, #12]
	led.GPIO_PinConfig.GPIO_PinNo=13;
 80001e2:	230d      	movs	r3, #13
 80001e4:	743b      	strb	r3, [r7, #16]
	led.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_OUT;
 80001e6:	2301      	movs	r3, #1
 80001e8:	747b      	strb	r3, [r7, #17]
	led.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 80001ea:	2302      	movs	r3, #2
 80001ec:	74bb      	strb	r3, [r7, #18]
	led.GPIO_PinConfig.GPIO_pinOpType=GPIO_OPTYPE_PP;
 80001ee:	2300      	movs	r3, #0
 80001f0:	753b      	strb	r3, [r7, #20]
	led.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 80001f2:	2300      	movs	r3, #0
 80001f4:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(GPIOC, ENABLE);
 80001f6:	2101      	movs	r1, #1
 80001f8:	4811      	ldr	r0, [pc, #68]	; (8000240 <GPIO_Configure+0x68>)
 80001fa:	f000 f93d 	bl	8000478 <GPIO_PeriClockControl>
	GPIO_Init(&led);
 80001fe:	f107 030c 	add.w	r3, r7, #12
 8000202:	4618      	mov	r0, r3
 8000204:	f000 f9d8 	bl	80005b8 <GPIO_Init>

	GPIO_Handle_t button;
	button.pGPIOx=GPIOA;
 8000208:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <GPIO_Configure+0x6c>)
 800020a:	603b      	str	r3, [r7, #0]
	button.GPIO_PinConfig.GPIO_PinNo=0;
 800020c:	2300      	movs	r3, #0
 800020e:	713b      	strb	r3, [r7, #4]
	button.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_IT_FT;
 8000210:	2305      	movs	r3, #5
 8000212:	717b      	strb	r3, [r7, #5]
	button.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 8000214:	2302      	movs	r3, #2
 8000216:	71bb      	strb	r3, [r7, #6]
	button.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_PU;
 8000218:	2301      	movs	r3, #1
 800021a:	71fb      	strb	r3, [r7, #7]
	button.GPIO_PinConfig.GPIO_pinOpType=GPIO_OPTYPE_PP;
 800021c:	2300      	movs	r3, #0
 800021e:	723b      	strb	r3, [r7, #8]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000220:	2101      	movs	r1, #1
 8000222:	4808      	ldr	r0, [pc, #32]	; (8000244 <GPIO_Configure+0x6c>)
 8000224:	f000 f928 	bl	8000478 <GPIO_PeriClockControl>
	GPIO_Init(&button);
 8000228:	463b      	mov	r3, r7
 800022a:	4618      	mov	r0, r3
 800022c:	f000 f9c4 	bl	80005b8 <GPIO_Init>
	IRQ_InterruptConfig(6, ENABLE);
 8000230:	2101      	movs	r1, #1
 8000232:	2006      	movs	r0, #6
 8000234:	f000 fbba 	bl	80009ac <IRQ_InterruptConfig>
}
 8000238:	bf00      	nop
 800023a:	3718      	adds	r7, #24
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	40020800 	.word	0x40020800
 8000244:	40020000 	.word	0x40020000

08000248 <main>:

int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
    /* Loop forever */
	printf("Start\n");
 800024c:	4807      	ldr	r0, [pc, #28]	; (800026c <main+0x24>)
 800024e:	f000 fce9 	bl	8000c24 <puts>
	GPIO_Configure();
 8000252:	f7ff ffc1 	bl	80001d8 <GPIO_Configure>
	GPIO_WriteOutputPin(GPIOC, 13, 1);
 8000256:	2201      	movs	r2, #1
 8000258:	210d      	movs	r1, #13
 800025a:	4805      	ldr	r0, [pc, #20]	; (8000270 <main+0x28>)
 800025c:	f000 fb6a 	bl	8000934 <GPIO_WriteOutputPin>
	GPIO_WriteOutputPin(GPIOC, 13, 0);
 8000260:	2200      	movs	r2, #0
 8000262:	210d      	movs	r1, #13
 8000264:	4802      	ldr	r0, [pc, #8]	; (8000270 <main+0x28>)
 8000266:	f000 fb65 	bl	8000934 <GPIO_WriteOutputPin>
	for(;;);
 800026a:	e7fe      	b.n	800026a <main+0x22>
 800026c:	08001550 	.word	0x08001550
 8000270:	40020800 	.word	0x40020800

08000274 <EXTI0_IRQHandler>:

}

void EXTI0_IRQHandler()
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	printf("In the interrupt\n");
 8000278:	4805      	ldr	r0, [pc, #20]	; (8000290 <EXTI0_IRQHandler+0x1c>)
 800027a:	f000 fcd3 	bl	8000c24 <puts>
	GPIO_ToggleOutputPin(GPIOC, 13);
 800027e:	210d      	movs	r1, #13
 8000280:	4804      	ldr	r0, [pc, #16]	; (8000294 <EXTI0_IRQHandler+0x20>)
 8000282:	f000 fb7e 	bl	8000982 <GPIO_ToggleOutputPin>
	IRQ_Handle(0);
 8000286:	2000      	movs	r0, #0
 8000288:	f000 fc0c 	bl	8000aa4 <IRQ_Handle>
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}
 8000290:	08001558 	.word	0x08001558
 8000294:	40020800 	.word	0x40020800

08000298 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <ITM_SendChar+0x44>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <ITM_SendChar+0x44>)
 80002a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002ac:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <ITM_SendChar+0x48>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <ITM_SendChar+0x48>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80002ba:	bf00      	nop
 80002bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f8      	beq.n	80002bc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80002ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	6013      	str	r3, [r2, #0]
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	e000edfc 	.word	0xe000edfc
 80002e0:	e0000e00 	.word	0xe0000e00

080002e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002f0:	2300      	movs	r3, #0
 80002f2:	617b      	str	r3, [r7, #20]
 80002f4:	e00a      	b.n	800030c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80002f6:	f3af 8000 	nop.w
 80002fa:	4601      	mov	r1, r0
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	1c5a      	adds	r2, r3, #1
 8000300:	60ba      	str	r2, [r7, #8]
 8000302:	b2ca      	uxtb	r2, r1
 8000304:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	3301      	adds	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
 800030c:	697a      	ldr	r2, [r7, #20]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	429a      	cmp	r2, r3
 8000312:	dbf0      	blt.n	80002f6 <_read+0x12>
	}

return len;
 8000314:	687b      	ldr	r3, [r7, #4]
}
 8000316:	4618      	mov	r0, r3
 8000318:	3718      	adds	r7, #24
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800031e:	b580      	push	{r7, lr}
 8000320:	b086      	sub	sp, #24
 8000322:	af00      	add	r7, sp, #0
 8000324:	60f8      	str	r0, [r7, #12]
 8000326:	60b9      	str	r1, [r7, #8]
 8000328:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]
 800032e:	e009      	b.n	8000344 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	1c5a      	adds	r2, r3, #1
 8000334:	60ba      	str	r2, [r7, #8]
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ffad 	bl	8000298 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	3301      	adds	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	697a      	ldr	r2, [r7, #20]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	429a      	cmp	r2, r3
 800034a:	dbf1      	blt.n	8000330 <_write+0x12>
	}
	return len;
 800034c:	687b      	ldr	r3, [r7, #4]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3718      	adds	r7, #24
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <_close>:

int _close(int file)
{
 8000356:	b480      	push	{r7}
 8000358:	b083      	sub	sp, #12
 800035a:	af00      	add	r7, sp, #0
 800035c:	6078      	str	r0, [r7, #4]
	return -1;
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000362:	4618      	mov	r0, r3
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800037c:	605a      	str	r2, [r3, #4]
	return 0;
 800037e:	2300      	movs	r3, #0
}
 8000380:	4618      	mov	r0, r3
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr

0800038a <_isatty>:

int _isatty(int file)
{
 800038a:	b480      	push	{r7}
 800038c:	b083      	sub	sp, #12
 800038e:	af00      	add	r7, sp, #0
 8000390:	6078      	str	r0, [r7, #4]
	return 1;
 8000392:	2301      	movs	r3, #1
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr

0800039e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800039e:	b480      	push	{r7}
 80003a0:	b085      	sub	sp, #20
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	60f8      	str	r0, [r7, #12]
 80003a6:	60b9      	str	r1, [r7, #8]
 80003a8:	607a      	str	r2, [r7, #4]
	return 0;
 80003aa:	2300      	movs	r3, #0
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3714      	adds	r7, #20
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
	...

080003b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003c0:	4a14      	ldr	r2, [pc, #80]	; (8000414 <_sbrk+0x5c>)
 80003c2:	4b15      	ldr	r3, [pc, #84]	; (8000418 <_sbrk+0x60>)
 80003c4:	1ad3      	subs	r3, r2, r3
 80003c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003cc:	4b13      	ldr	r3, [pc, #76]	; (800041c <_sbrk+0x64>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d102      	bne.n	80003da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <_sbrk+0x64>)
 80003d6:	4a12      	ldr	r2, [pc, #72]	; (8000420 <_sbrk+0x68>)
 80003d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <_sbrk+0x64>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4413      	add	r3, r2
 80003e2:	693a      	ldr	r2, [r7, #16]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d207      	bcs.n	80003f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003e8:	f000 fb7c 	bl	8000ae4 <__errno>
 80003ec:	4603      	mov	r3, r0
 80003ee:	220c      	movs	r2, #12
 80003f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003f2:	f04f 33ff 	mov.w	r3, #4294967295
 80003f6:	e009      	b.n	800040c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <_sbrk+0x64>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003fe:	4b07      	ldr	r3, [pc, #28]	; (800041c <_sbrk+0x64>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4413      	add	r3, r2
 8000406:	4a05      	ldr	r2, [pc, #20]	; (800041c <_sbrk+0x64>)
 8000408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800040a:	68fb      	ldr	r3, [r7, #12]
}
 800040c:	4618      	mov	r0, r3
 800040e:	3718      	adds	r7, #24
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20020000 	.word	0x20020000
 8000418:	00000400 	.word	0x00000400
 800041c:	20000080 	.word	0x20000080
 8000420:	20000098 	.word	0x20000098

08000424 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000424:	480d      	ldr	r0, [pc, #52]	; (800045c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000426:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000428:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800042c:	480c      	ldr	r0, [pc, #48]	; (8000460 <LoopForever+0x6>)
  ldr r1, =_edata
 800042e:	490d      	ldr	r1, [pc, #52]	; (8000464 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000430:	4a0d      	ldr	r2, [pc, #52]	; (8000468 <LoopForever+0xe>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000434:	e002      	b.n	800043c <LoopCopyDataInit>

08000436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800043a:	3304      	adds	r3, #4

0800043c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800043c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000440:	d3f9      	bcc.n	8000436 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000442:	4a0a      	ldr	r2, [pc, #40]	; (800046c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000444:	4c0a      	ldr	r4, [pc, #40]	; (8000470 <LoopForever+0x16>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000448:	e001      	b.n	800044e <LoopFillZerobss>

0800044a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800044a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800044c:	3204      	adds	r2, #4

0800044e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000450:	d3fb      	bcc.n	800044a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000452:	f000 fb4d 	bl	8000af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000456:	f7ff fef7 	bl	8000248 <main>

0800045a <LoopForever>:

LoopForever:
    b LoopForever
 800045a:	e7fe      	b.n	800045a <LoopForever>
  ldr   r0, =_estack
 800045c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000464:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000468:	080015d8 	.word	0x080015d8
  ldr r2, =_sbss
 800046c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000470:	20000094 	.word	0x20000094

08000474 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC_IRQHandler>
	...

08000478 <GPIO_PeriClockControl>:


#include "stm32f411xx_gpio.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	460b      	mov	r3, r1
 8000482:	70fb      	strb	r3, [r7, #3]
	if(EnorDi)
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d041      	beq.n	800050e <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx==GPIOA)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a43      	ldr	r2, [pc, #268]	; (800059c <GPIO_PeriClockControl+0x124>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d106      	bne.n	80004a0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_CLK_EN();
 8000492:	4b43      	ldr	r3, [pc, #268]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000496:	4a42      	ldr	r2, [pc, #264]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_CLK_DI();
		}
	}

}
 800049e:	e077      	b.n	8000590 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx==GPIOB)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a40      	ldr	r2, [pc, #256]	; (80005a4 <GPIO_PeriClockControl+0x12c>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d106      	bne.n	80004b6 <GPIO_PeriClockControl+0x3e>
			GPIOB_CLK_EN();
 80004a8:	4b3d      	ldr	r3, [pc, #244]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4a3c      	ldr	r2, [pc, #240]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 80004ae:	f043 0302 	orr.w	r3, r3, #2
 80004b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b4:	e06c      	b.n	8000590 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx==GPIOC)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4a3b      	ldr	r2, [pc, #236]	; (80005a8 <GPIO_PeriClockControl+0x130>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d106      	bne.n	80004cc <GPIO_PeriClockControl+0x54>
			GPIOC_CLK_EN();
 80004be:	4b38      	ldr	r3, [pc, #224]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 80004c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c2:	4a37      	ldr	r2, [pc, #220]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 80004c4:	f043 0304 	orr.w	r3, r3, #4
 80004c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ca:	e061      	b.n	8000590 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx==GPIOD)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a37      	ldr	r2, [pc, #220]	; (80005ac <GPIO_PeriClockControl+0x134>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d106      	bne.n	80004e2 <GPIO_PeriClockControl+0x6a>
			GPIOD_CLK_EN();
 80004d4:	4b32      	ldr	r3, [pc, #200]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 80004d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d8:	4a31      	ldr	r2, [pc, #196]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 80004da:	f043 0308 	orr.w	r3, r3, #8
 80004de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e0:	e056      	b.n	8000590 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx==GPIOE)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a32      	ldr	r2, [pc, #200]	; (80005b0 <GPIO_PeriClockControl+0x138>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d106      	bne.n	80004f8 <GPIO_PeriClockControl+0x80>
			GPIOE_CLK_EN();
 80004ea:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a2c      	ldr	r2, [pc, #176]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 80004f0:	f043 0310 	orr.w	r3, r3, #16
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f6:	e04b      	b.n	8000590 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx==GPIOH)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a2e      	ldr	r2, [pc, #184]	; (80005b4 <GPIO_PeriClockControl+0x13c>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d147      	bne.n	8000590 <GPIO_PeriClockControl+0x118>
			GPIOH_CLK_EN();
 8000500:	4b27      	ldr	r3, [pc, #156]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 8000502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000504:	4a26      	ldr	r2, [pc, #152]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 8000506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800050a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050c:	e040      	b.n	8000590 <GPIO_PeriClockControl+0x118>
		if(pGPIOx==GPIOA)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a22      	ldr	r2, [pc, #136]	; (800059c <GPIO_PeriClockControl+0x124>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d106      	bne.n	8000524 <GPIO_PeriClockControl+0xac>
			GPIOA_CLK_DI();
 8000516:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a21      	ldr	r2, [pc, #132]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 800051c:	f023 0301 	bic.w	r3, r3, #1
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000522:	e035      	b.n	8000590 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx==GPIOB)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a1f      	ldr	r2, [pc, #124]	; (80005a4 <GPIO_PeriClockControl+0x12c>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d106      	bne.n	800053a <GPIO_PeriClockControl+0xc2>
			GPIOB_CLK_DI();
 800052c:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	4a1b      	ldr	r2, [pc, #108]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 8000532:	f023 0302 	bic.w	r3, r3, #2
 8000536:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000538:	e02a      	b.n	8000590 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx==GPIOC)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a1a      	ldr	r2, [pc, #104]	; (80005a8 <GPIO_PeriClockControl+0x130>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d106      	bne.n	8000550 <GPIO_PeriClockControl+0xd8>
			GPIOC_CLK_DI();
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 8000548:	f023 0304 	bic.w	r3, r3, #4
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800054e:	e01f      	b.n	8000590 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx==GPIOD)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a16      	ldr	r2, [pc, #88]	; (80005ac <GPIO_PeriClockControl+0x134>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d106      	bne.n	8000566 <GPIO_PeriClockControl+0xee>
			GPIOD_CLK_DI();
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 800055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055c:	4a10      	ldr	r2, [pc, #64]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 800055e:	f023 0308 	bic.w	r3, r3, #8
 8000562:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000564:	e014      	b.n	8000590 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx==GPIOE)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a11      	ldr	r2, [pc, #68]	; (80005b0 <GPIO_PeriClockControl+0x138>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d106      	bne.n	800057c <GPIO_PeriClockControl+0x104>
			GPIOE_CLK_DI();
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 8000574:	f023 0310 	bic.w	r3, r3, #16
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057a:	e009      	b.n	8000590 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx==GPIOH)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <GPIO_PeriClockControl+0x13c>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d105      	bne.n	8000590 <GPIO_PeriClockControl+0x118>
			GPIOH_CLK_DI();
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <GPIO_PeriClockControl+0x128>)
 800058a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800058e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40020000 	.word	0x40020000
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40020400 	.word	0x40020400
 80005a8:	40020800 	.word	0x40020800
 80005ac:	40020c00 	.word	0x40020c00
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40021c00 	.word	0x40021c00

080005b8 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIO_Handle)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	pGPIO_Handle->pGPIOx->MODER &= ~(3<<(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo*2));
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	791b      	ldrb	r3, [r3, #4]
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	2103      	movs	r1, #3
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	43db      	mvns	r3, r3
 80005d4:	4619      	mov	r1, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	400a      	ands	r2, r1
 80005dc:	601a      	str	r2, [r3, #0]
	//configure mode of GPIOx
	if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_ANALOG)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	795b      	ldrb	r3, [r3, #5]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d810      	bhi.n	8000608 <GPIO_Init+0x50>
	{

		pGPIO_Handle->pGPIOx->MODER |=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode<<(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo*2));
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	795b      	ldrb	r3, [r3, #5]
 80005f0:	4619      	mov	r1, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	fa01 f303 	lsl.w	r3, r1, r3
 80005fc:	4619      	mov	r1, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	430a      	orrs	r2, r1
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	e0fa      	b.n	80007fe <GPIO_Init+0x246>
	}
	else
	{
		//set mode as input
//		pGPIO_Handle->pGPIOx->MODER &=~(3<<(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo*2));
		SYSCFG_CLK_EN();
 8000608:	4b6b      	ldr	r3, [pc, #428]	; (80007b8 <GPIO_Init+0x200>)
 800060a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060c:	4a6a      	ldr	r2, [pc, #424]	; (80007b8 <GPIO_Init+0x200>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6453      	str	r3, [r2, #68]	; 0x44

		//unmask interrupt for pin
		EXTI->IMR |=(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000614:	4b69      	ldr	r3, [pc, #420]	; (80007bc <GPIO_Init+0x204>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	7912      	ldrb	r2, [r2, #4]
 800061c:	4611      	mov	r1, r2
 800061e:	2201      	movs	r2, #1
 8000620:	408a      	lsls	r2, r1
 8000622:	4611      	mov	r1, r2
 8000624:	4a65      	ldr	r2, [pc, #404]	; (80007bc <GPIO_Init+0x204>)
 8000626:	430b      	orrs	r3, r1
 8000628:	6013      	str	r3, [r2, #0]

		//select RT/FT for interrupt
		if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	795b      	ldrb	r3, [r3, #5]
 800062e:	2b04      	cmp	r3, #4
 8000630:	d117      	bne.n	8000662 <GPIO_Init+0xaa>
		{
			EXTI->RTSR |=(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000632:	4b62      	ldr	r3, [pc, #392]	; (80007bc <GPIO_Init+0x204>)
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	7912      	ldrb	r2, [r2, #4]
 800063a:	4611      	mov	r1, r2
 800063c:	2201      	movs	r2, #1
 800063e:	408a      	lsls	r2, r1
 8000640:	4611      	mov	r1, r2
 8000642:	4a5e      	ldr	r2, [pc, #376]	; (80007bc <GPIO_Init+0x204>)
 8000644:	430b      	orrs	r3, r1
 8000646:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &=~(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000648:	4b5c      	ldr	r3, [pc, #368]	; (80007bc <GPIO_Init+0x204>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	7912      	ldrb	r2, [r2, #4]
 8000650:	4611      	mov	r1, r2
 8000652:	2201      	movs	r2, #1
 8000654:	408a      	lsls	r2, r1
 8000656:	43d2      	mvns	r2, r2
 8000658:	4611      	mov	r1, r2
 800065a:	4a58      	ldr	r2, [pc, #352]	; (80007bc <GPIO_Init+0x204>)
 800065c:	400b      	ands	r3, r1
 800065e:	60d3      	str	r3, [r2, #12]
 8000660:	e035      	b.n	80006ce <GPIO_Init+0x116>
		}
		else if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FT)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	795b      	ldrb	r3, [r3, #5]
 8000666:	2b05      	cmp	r3, #5
 8000668:	d117      	bne.n	800069a <GPIO_Init+0xe2>
		{
			EXTI->FTSR |=(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo);
 800066a:	4b54      	ldr	r3, [pc, #336]	; (80007bc <GPIO_Init+0x204>)
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	7912      	ldrb	r2, [r2, #4]
 8000672:	4611      	mov	r1, r2
 8000674:	2201      	movs	r2, #1
 8000676:	408a      	lsls	r2, r1
 8000678:	4611      	mov	r1, r2
 800067a:	4a50      	ldr	r2, [pc, #320]	; (80007bc <GPIO_Init+0x204>)
 800067c:	430b      	orrs	r3, r1
 800067e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &=~(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000680:	4b4e      	ldr	r3, [pc, #312]	; (80007bc <GPIO_Init+0x204>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	7912      	ldrb	r2, [r2, #4]
 8000688:	4611      	mov	r1, r2
 800068a:	2201      	movs	r2, #1
 800068c:	408a      	lsls	r2, r1
 800068e:	43d2      	mvns	r2, r2
 8000690:	4611      	mov	r1, r2
 8000692:	4a4a      	ldr	r2, [pc, #296]	; (80007bc <GPIO_Init+0x204>)
 8000694:	400b      	ands	r3, r1
 8000696:	6093      	str	r3, [r2, #8]
 8000698:	e019      	b.n	80006ce <GPIO_Init+0x116>
		}
		else if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RTFT)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	795b      	ldrb	r3, [r3, #5]
 800069e:	2b06      	cmp	r3, #6
 80006a0:	d115      	bne.n	80006ce <GPIO_Init+0x116>
		{
			EXTI->RTSR |=(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo);
 80006a2:	4b46      	ldr	r3, [pc, #280]	; (80007bc <GPIO_Init+0x204>)
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	7912      	ldrb	r2, [r2, #4]
 80006aa:	4611      	mov	r1, r2
 80006ac:	2201      	movs	r2, #1
 80006ae:	408a      	lsls	r2, r1
 80006b0:	4611      	mov	r1, r2
 80006b2:	4a42      	ldr	r2, [pc, #264]	; (80007bc <GPIO_Init+0x204>)
 80006b4:	430b      	orrs	r3, r1
 80006b6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |=(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo);
 80006b8:	4b40      	ldr	r3, [pc, #256]	; (80007bc <GPIO_Init+0x204>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	7912      	ldrb	r2, [r2, #4]
 80006c0:	4611      	mov	r1, r2
 80006c2:	2201      	movs	r2, #1
 80006c4:	408a      	lsls	r2, r1
 80006c6:	4611      	mov	r1, r2
 80006c8:	4a3c      	ldr	r2, [pc, #240]	; (80007bc <GPIO_Init+0x204>)
 80006ca:	430b      	orrs	r3, r1
 80006cc:	60d3      	str	r3, [r2, #12]
		}

		//select port for EXTIx interrupt line
		uint8_t t1=pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo/4;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	089b      	lsrs	r3, r3, #2
 80006d4:	73fb      	strb	r3, [r7, #15]
		uint8_t t2=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo%4)*4;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	791b      	ldrb	r3, [r3, #4]
 80006da:	f003 0303 	and.w	r3, r3, #3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	73bb      	strb	r3, [r7, #14]

		SYSCFG->EXTICR[t1] &=~(0xF<<t2);
 80006e4:	4a36      	ldr	r2, [pc, #216]	; (80007c0 <GPIO_Init+0x208>)
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	3302      	adds	r3, #2
 80006ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ee:	7bbb      	ldrb	r3, [r7, #14]
 80006f0:	210f      	movs	r1, #15
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	43db      	mvns	r3, r3
 80006f8:	4618      	mov	r0, r3
 80006fa:	4931      	ldr	r1, [pc, #196]	; (80007c0 <GPIO_Init+0x208>)
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	4002      	ands	r2, r0
 8000700:	3302      	adds	r3, #2
 8000702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(pGPIO_Handle->pGPIOx==GPIOB)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a2e      	ldr	r2, [pc, #184]	; (80007c4 <GPIO_Init+0x20c>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d110      	bne.n	8000732 <GPIO_Init+0x17a>
		{
			SYSCFG->EXTICR[t1] |=(1<<t2);
 8000710:	4a2b      	ldr	r2, [pc, #172]	; (80007c0 <GPIO_Init+0x208>)
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	3302      	adds	r3, #2
 8000716:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800071a:	7bbb      	ldrb	r3, [r7, #14]
 800071c:	2101      	movs	r1, #1
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	4618      	mov	r0, r3
 8000724:	4926      	ldr	r1, [pc, #152]	; (80007c0 <GPIO_Init+0x208>)
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	4302      	orrs	r2, r0
 800072a:	3302      	adds	r3, #2
 800072c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000730:	e065      	b.n	80007fe <GPIO_Init+0x246>
		}
		else if(pGPIO_Handle->pGPIOx==GPIOC)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <GPIO_Init+0x210>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d110      	bne.n	800075e <GPIO_Init+0x1a6>
		{
			SYSCFG->EXTICR[t1] |=(2<<t2);
 800073c:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <GPIO_Init+0x208>)
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	3302      	adds	r3, #2
 8000742:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000746:	7bbb      	ldrb	r3, [r7, #14]
 8000748:	2102      	movs	r1, #2
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	4618      	mov	r0, r3
 8000750:	491b      	ldr	r1, [pc, #108]	; (80007c0 <GPIO_Init+0x208>)
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	4302      	orrs	r2, r0
 8000756:	3302      	adds	r3, #2
 8000758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800075c:	e04f      	b.n	80007fe <GPIO_Init+0x246>
		}
		else if(pGPIO_Handle->pGPIOx==GPIOD)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a1a      	ldr	r2, [pc, #104]	; (80007cc <GPIO_Init+0x214>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d110      	bne.n	800078a <GPIO_Init+0x1d2>
		{
			SYSCFG->EXTICR[t1] |=(3<<t2);
 8000768:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <GPIO_Init+0x208>)
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	3302      	adds	r3, #2
 800076e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000772:	7bbb      	ldrb	r3, [r7, #14]
 8000774:	2103      	movs	r1, #3
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	4618      	mov	r0, r3
 800077c:	4910      	ldr	r1, [pc, #64]	; (80007c0 <GPIO_Init+0x208>)
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	4302      	orrs	r2, r0
 8000782:	3302      	adds	r3, #2
 8000784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000788:	e039      	b.n	80007fe <GPIO_Init+0x246>
		}
		else if(pGPIO_Handle->pGPIOx==GPIOE)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <GPIO_Init+0x218>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d11f      	bne.n	80007d4 <GPIO_Init+0x21c>
		{
			SYSCFG->EXTICR[t1] |=(4<<t2);
 8000794:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <GPIO_Init+0x208>)
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	3302      	adds	r3, #2
 800079a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	2104      	movs	r1, #4
 80007a2:	fa01 f303 	lsl.w	r3, r1, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	4905      	ldr	r1, [pc, #20]	; (80007c0 <GPIO_Init+0x208>)
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	4302      	orrs	r2, r0
 80007ae:	3302      	adds	r3, #2
 80007b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80007b4:	e023      	b.n	80007fe <GPIO_Init+0x246>
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40013c00 	.word	0x40013c00
 80007c0:	40013800 	.word	0x40013800
 80007c4:	40020400 	.word	0x40020400
 80007c8:	40020800 	.word	0x40020800
 80007cc:	40020c00 	.word	0x40020c00
 80007d0:	40021000 	.word	0x40021000
		}
		else if(pGPIO_Handle->pGPIOx==GPIOH)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a54      	ldr	r2, [pc, #336]	; (800092c <GPIO_Init+0x374>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d10f      	bne.n	80007fe <GPIO_Init+0x246>
		{
			SYSCFG->EXTICR[t1] |=(7<<t2);
 80007de:	4a54      	ldr	r2, [pc, #336]	; (8000930 <GPIO_Init+0x378>)
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	3302      	adds	r3, #2
 80007e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	2107      	movs	r1, #7
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	494f      	ldr	r1, [pc, #316]	; (8000930 <GPIO_Init+0x378>)
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	4302      	orrs	r2, r0
 80007f8:	3302      	adds	r3, #2
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	}

	//configure speed of GPIOx
	pGPIO_Handle->pGPIOx->OSPEEDR &= ~(3<<(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo*2));
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	689a      	ldr	r2, [r3, #8]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	791b      	ldrb	r3, [r3, #4]
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	2103      	movs	r1, #3
 800080c:	fa01 f303 	lsl.w	r3, r1, r3
 8000810:	43db      	mvns	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	400a      	ands	r2, r1
 800081a:	609a      	str	r2, [r3, #8]
	pGPIO_Handle->pGPIOx->OSPEEDR |=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed<<(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo*2));
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	689a      	ldr	r2, [r3, #8]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	799b      	ldrb	r3, [r3, #6]
 8000826:	4619      	mov	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	791b      	ldrb	r3, [r3, #4]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	4619      	mov	r1, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	430a      	orrs	r2, r1
 800083a:	609a      	str	r2, [r3, #8]

	//configure pull up/down
	pGPIO_Handle->pGPIOx->PUPDR &=~(3<<(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo*2));
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	68da      	ldr	r2, [r3, #12]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	791b      	ldrb	r3, [r3, #4]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	2103      	movs	r1, #3
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	43db      	mvns	r3, r3
 8000850:	4619      	mov	r1, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	400a      	ands	r2, r1
 8000858:	60da      	str	r2, [r3, #12]
	pGPIO_Handle->pGPIOx->PUPDR |=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdControl<<(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo*2));
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	68da      	ldr	r2, [r3, #12]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	79db      	ldrb	r3, [r3, #7]
 8000864:	4619      	mov	r1, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	791b      	ldrb	r3, [r3, #4]
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	fa01 f303 	lsl.w	r3, r1, r3
 8000870:	4619      	mov	r1, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	430a      	orrs	r2, r1
 8000878:	60da      	str	r2, [r3, #12]

	//configure output type
	pGPIO_Handle->pGPIOx->OTYPER &=~(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	4619      	mov	r1, r3
 8000886:	2301      	movs	r3, #1
 8000888:	408b      	lsls	r3, r1
 800088a:	43db      	mvns	r3, r3
 800088c:	4619      	mov	r1, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	400a      	ands	r2, r1
 8000894:	605a      	str	r2, [r3, #4]
	pGPIO_Handle->pGPIOx->OTYPER |=(pGPIO_Handle->GPIO_PinConfig.GPIO_pinOpType<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7a1b      	ldrb	r3, [r3, #8]
 80008a0:	4619      	mov	r1, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	791b      	ldrb	r3, [r3, #4]
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	4619      	mov	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	430a      	orrs	r2, r1
 80008b2:	605a      	str	r2, [r3, #4]

	//configure alternate functionalities
	if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_ALTFN)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	795b      	ldrb	r3, [r3, #5]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d131      	bne.n	8000920 <GPIO_Init+0x368>
	{
		uint8_t t1=pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo/8;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	791b      	ldrb	r3, [r3, #4]
 80008c0:	08db      	lsrs	r3, r3, #3
 80008c2:	737b      	strb	r3, [r7, #13]
		uint8_t t2=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNo%8)*4;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	791b      	ldrb	r3, [r3, #4]
 80008c8:	f003 0307 	and.w	r3, r3, #7
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	733b      	strb	r3, [r7, #12]
		pGPIO_Handle->pGPIOx->AFR[t1] &=~(0xF<<t2);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	7b7a      	ldrb	r2, [r7, #13]
 80008d8:	3208      	adds	r2, #8
 80008da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008de:	7b3b      	ldrb	r3, [r7, #12]
 80008e0:	220f      	movs	r2, #15
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	7b7a      	ldrb	r2, [r7, #13]
 80008f0:	4001      	ands	r1, r0
 80008f2:	3208      	adds	r2, #8
 80008f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIO_Handle->pGPIOx->AFR[t1] |=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode<<t2);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	7b7a      	ldrb	r2, [r7, #13]
 80008fe:	3208      	adds	r2, #8
 8000900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7a5b      	ldrb	r3, [r3, #9]
 8000908:	461a      	mov	r2, r3
 800090a:	7b3b      	ldrb	r3, [r7, #12]
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	4618      	mov	r0, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	7b7a      	ldrb	r2, [r7, #13]
 8000918:	4301      	orrs	r1, r0
 800091a:	3208      	adds	r2, #8
 800091c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40021c00 	.word	0x40021c00
 8000930:	40013800 	.word	0x40013800

08000934 <GPIO_WriteOutputPin>:
{
	return pGPIOx->IDR;
}

void GPIO_WriteOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNo, uint8_t data)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	70fb      	strb	r3, [r7, #3]
 8000940:	4613      	mov	r3, r2
 8000942:	70bb      	strb	r3, [r7, #2]
	if(data==GPIO_PIN_SET)
 8000944:	78bb      	ldrb	r3, [r7, #2]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d109      	bne.n	800095e <GPIO_WriteOutputPin+0x2a>
	{
		pGPIOx->ODR |=(1<<PinNo);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	78fa      	ldrb	r2, [r7, #3]
 8000950:	2101      	movs	r1, #1
 8000952:	fa01 f202 	lsl.w	r2, r1, r2
 8000956:	431a      	orrs	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	615a      	str	r2, [r3, #20]
	}
	else if(data==GPIO_PIN_RESET)
	{
		pGPIOx->ODR &=~(1<<PinNo);
	}
}
 800095c:	e00c      	b.n	8000978 <GPIO_WriteOutputPin+0x44>
	else if(data==GPIO_PIN_RESET)
 800095e:	78bb      	ldrb	r3, [r7, #2]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d109      	bne.n	8000978 <GPIO_WriteOutputPin+0x44>
		pGPIOx->ODR &=~(1<<PinNo);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	78fa      	ldrb	r2, [r7, #3]
 800096a:	2101      	movs	r1, #1
 800096c:	fa01 f202 	lsl.w	r2, r1, r2
 8000970:	43d2      	mvns	r2, r2
 8000972:	401a      	ands	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	615a      	str	r2, [r3, #20]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr

08000982 <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR=data;

}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNo)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	460b      	mov	r3, r1
 800098c:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^=(1<<PinNo);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	78fa      	ldrb	r2, [r7, #3]
 8000994:	2101      	movs	r1, #1
 8000996:	fa01 f202 	lsl.w	r2, r1, r2
 800099a:	405a      	eors	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	615a      	str	r2, [r3, #20]

}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
	...

080009ac <IRQ_InterruptConfig>:

void IRQ_InterruptConfig(uint8_t IRQNo, uint8_t EnorDi)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	460a      	mov	r2, r1
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	4613      	mov	r3, r2
 80009ba:	71bb      	strb	r3, [r7, #6]
	if(EnorDi)
 80009bc:	79bb      	ldrb	r3, [r7, #6]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d02f      	beq.n	8000a22 <IRQ_InterruptConfig+0x76>
	{
		if(IRQNo<32)
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b1f      	cmp	r3, #31
 80009c6:	d80a      	bhi.n	80009de <IRQ_InterruptConfig+0x32>
		{
			*NVIC_ISER0 |=(1<<IRQNo);
 80009c8:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <IRQ_InterruptConfig+0xe0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	79fa      	ldrb	r2, [r7, #7]
 80009ce:	2101      	movs	r1, #1
 80009d0:	fa01 f202 	lsl.w	r2, r1, r2
 80009d4:	4611      	mov	r1, r2
 80009d6:	4a2d      	ldr	r2, [pc, #180]	; (8000a8c <IRQ_InterruptConfig+0xe0>)
 80009d8:	430b      	orrs	r3, r1
 80009da:	6013      	str	r3, [r2, #0]
		{
			*NVIC_ICER2 |=(1<<IRQNo);
		}
	}

}
 80009dc:	e051      	b.n	8000a82 <IRQ_InterruptConfig+0xd6>
		else if(IRQNo>=32 && IRQNo<64)
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b1f      	cmp	r3, #31
 80009e2:	d90d      	bls.n	8000a00 <IRQ_InterruptConfig+0x54>
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b3f      	cmp	r3, #63	; 0x3f
 80009e8:	d80a      	bhi.n	8000a00 <IRQ_InterruptConfig+0x54>
			*NVIC_ISER1 |=(1<<IRQNo);
 80009ea:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <IRQ_InterruptConfig+0xe4>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	79fa      	ldrb	r2, [r7, #7]
 80009f0:	2101      	movs	r1, #1
 80009f2:	fa01 f202 	lsl.w	r2, r1, r2
 80009f6:	4611      	mov	r1, r2
 80009f8:	4a25      	ldr	r2, [pc, #148]	; (8000a90 <IRQ_InterruptConfig+0xe4>)
 80009fa:	430b      	orrs	r3, r1
 80009fc:	6013      	str	r3, [r2, #0]
 80009fe:	e040      	b.n	8000a82 <IRQ_InterruptConfig+0xd6>
		else if(IRQNo>=64 && IRQNo<96)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b3f      	cmp	r3, #63	; 0x3f
 8000a04:	d93d      	bls.n	8000a82 <IRQ_InterruptConfig+0xd6>
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b5f      	cmp	r3, #95	; 0x5f
 8000a0a:	d83a      	bhi.n	8000a82 <IRQ_InterruptConfig+0xd6>
			*NVIC_ISER2 |=(1<<IRQNo);
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <IRQ_InterruptConfig+0xe8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	79fa      	ldrb	r2, [r7, #7]
 8000a12:	2101      	movs	r1, #1
 8000a14:	fa01 f202 	lsl.w	r2, r1, r2
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4a1e      	ldr	r2, [pc, #120]	; (8000a94 <IRQ_InterruptConfig+0xe8>)
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	e02f      	b.n	8000a82 <IRQ_InterruptConfig+0xd6>
		if(IRQNo<32)
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b1f      	cmp	r3, #31
 8000a26:	d80a      	bhi.n	8000a3e <IRQ_InterruptConfig+0x92>
			*NVIC_ICER0 |=(1<<IRQNo);
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <IRQ_InterruptConfig+0xec>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	2101      	movs	r1, #1
 8000a30:	fa01 f202 	lsl.w	r2, r1, r2
 8000a34:	4611      	mov	r1, r2
 8000a36:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <IRQ_InterruptConfig+0xec>)
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	e021      	b.n	8000a82 <IRQ_InterruptConfig+0xd6>
		else if(IRQNo>=32 && IRQNo<64)
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b1f      	cmp	r3, #31
 8000a42:	d90d      	bls.n	8000a60 <IRQ_InterruptConfig+0xb4>
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	2b3f      	cmp	r3, #63	; 0x3f
 8000a48:	d80a      	bhi.n	8000a60 <IRQ_InterruptConfig+0xb4>
			*NVIC_ICER1 |=(1<<IRQNo);
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <IRQ_InterruptConfig+0xf0>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	79fa      	ldrb	r2, [r7, #7]
 8000a50:	2101      	movs	r1, #1
 8000a52:	fa01 f202 	lsl.w	r2, r1, r2
 8000a56:	4611      	mov	r1, r2
 8000a58:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <IRQ_InterruptConfig+0xf0>)
 8000a5a:	430b      	orrs	r3, r1
 8000a5c:	6013      	str	r3, [r2, #0]
 8000a5e:	e010      	b.n	8000a82 <IRQ_InterruptConfig+0xd6>
		else if(IRQNo>=64 && IRQNo<96)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b3f      	cmp	r3, #63	; 0x3f
 8000a64:	d90d      	bls.n	8000a82 <IRQ_InterruptConfig+0xd6>
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b5f      	cmp	r3, #95	; 0x5f
 8000a6a:	d80a      	bhi.n	8000a82 <IRQ_InterruptConfig+0xd6>
			*NVIC_ICER2 |=(1<<IRQNo);
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <IRQ_InterruptConfig+0xf4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	79fa      	ldrb	r2, [r7, #7]
 8000a72:	2101      	movs	r1, #1
 8000a74:	fa01 f202 	lsl.w	r2, r1, r2
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <IRQ_InterruptConfig+0xf4>)
 8000a7c:	430b      	orrs	r3, r1
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	e7ff      	b.n	8000a82 <IRQ_InterruptConfig+0xd6>
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000e104 	.word	0xe000e104
 8000a94:	e000e108 	.word	0xe000e108
 8000a98:	e000e180 	.word	0xe000e180
 8000a9c:	e000e184 	.word	0xe000e184
 8000aa0:	e000e188 	.word	0xe000e188

08000aa4 <IRQ_Handle>:
	NVIC_IPR0[t1] |=(IRQPriority<<shiftAmount);


}
void IRQ_Handle(uint8_t PinNo)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
	if(EXTI->PR & (1<<PinNo))
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <IRQ_Handle+0x3c>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	79fa      	ldrb	r2, [r7, #7]
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aba:	4013      	ands	r3, r2
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d009      	beq.n	8000ad4 <IRQ_Handle+0x30>
	{
		EXTI->PR |=(1<<PinNo);
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <IRQ_Handle+0x3c>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8000acc:	4611      	mov	r1, r2
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <IRQ_Handle+0x3c>)
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	6153      	str	r3, [r2, #20]
	}

}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40013c00 	.word	0x40013c00

08000ae4 <__errno>:
 8000ae4:	4b01      	ldr	r3, [pc, #4]	; (8000aec <__errno+0x8>)
 8000ae6:	6818      	ldr	r0, [r3, #0]
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000000 	.word	0x20000000

08000af0 <__libc_init_array>:
 8000af0:	b570      	push	{r4, r5, r6, lr}
 8000af2:	4d0d      	ldr	r5, [pc, #52]	; (8000b28 <__libc_init_array+0x38>)
 8000af4:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__libc_init_array+0x3c>)
 8000af6:	1b64      	subs	r4, r4, r5
 8000af8:	10a4      	asrs	r4, r4, #2
 8000afa:	2600      	movs	r6, #0
 8000afc:	42a6      	cmp	r6, r4
 8000afe:	d109      	bne.n	8000b14 <__libc_init_array+0x24>
 8000b00:	4d0b      	ldr	r5, [pc, #44]	; (8000b30 <__libc_init_array+0x40>)
 8000b02:	4c0c      	ldr	r4, [pc, #48]	; (8000b34 <__libc_init_array+0x44>)
 8000b04:	f000 fd18 	bl	8001538 <_init>
 8000b08:	1b64      	subs	r4, r4, r5
 8000b0a:	10a4      	asrs	r4, r4, #2
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	42a6      	cmp	r6, r4
 8000b10:	d105      	bne.n	8000b1e <__libc_init_array+0x2e>
 8000b12:	bd70      	pop	{r4, r5, r6, pc}
 8000b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b18:	4798      	blx	r3
 8000b1a:	3601      	adds	r6, #1
 8000b1c:	e7ee      	b.n	8000afc <__libc_init_array+0xc>
 8000b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b22:	4798      	blx	r3
 8000b24:	3601      	adds	r6, #1
 8000b26:	e7f2      	b.n	8000b0e <__libc_init_array+0x1e>
 8000b28:	080015d0 	.word	0x080015d0
 8000b2c:	080015d0 	.word	0x080015d0
 8000b30:	080015d0 	.word	0x080015d0
 8000b34:	080015d4 	.word	0x080015d4

08000b38 <memset>:
 8000b38:	4402      	add	r2, r0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d100      	bne.n	8000b42 <memset+0xa>
 8000b40:	4770      	bx	lr
 8000b42:	f803 1b01 	strb.w	r1, [r3], #1
 8000b46:	e7f9      	b.n	8000b3c <memset+0x4>

08000b48 <_puts_r>:
 8000b48:	b570      	push	{r4, r5, r6, lr}
 8000b4a:	460e      	mov	r6, r1
 8000b4c:	4605      	mov	r5, r0
 8000b4e:	b118      	cbz	r0, 8000b58 <_puts_r+0x10>
 8000b50:	6983      	ldr	r3, [r0, #24]
 8000b52:	b90b      	cbnz	r3, 8000b58 <_puts_r+0x10>
 8000b54:	f000 fa44 	bl	8000fe0 <__sinit>
 8000b58:	69ab      	ldr	r3, [r5, #24]
 8000b5a:	68ac      	ldr	r4, [r5, #8]
 8000b5c:	b913      	cbnz	r3, 8000b64 <_puts_r+0x1c>
 8000b5e:	4628      	mov	r0, r5
 8000b60:	f000 fa3e 	bl	8000fe0 <__sinit>
 8000b64:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <_puts_r+0xd0>)
 8000b66:	429c      	cmp	r4, r3
 8000b68:	d120      	bne.n	8000bac <_puts_r+0x64>
 8000b6a:	686c      	ldr	r4, [r5, #4]
 8000b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b6e:	07db      	lsls	r3, r3, #31
 8000b70:	d405      	bmi.n	8000b7e <_puts_r+0x36>
 8000b72:	89a3      	ldrh	r3, [r4, #12]
 8000b74:	0598      	lsls	r0, r3, #22
 8000b76:	d402      	bmi.n	8000b7e <_puts_r+0x36>
 8000b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b7a:	f000 facf 	bl	800111c <__retarget_lock_acquire_recursive>
 8000b7e:	89a3      	ldrh	r3, [r4, #12]
 8000b80:	0719      	lsls	r1, r3, #28
 8000b82:	d51d      	bpl.n	8000bc0 <_puts_r+0x78>
 8000b84:	6923      	ldr	r3, [r4, #16]
 8000b86:	b1db      	cbz	r3, 8000bc0 <_puts_r+0x78>
 8000b88:	3e01      	subs	r6, #1
 8000b8a:	68a3      	ldr	r3, [r4, #8]
 8000b8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b90:	3b01      	subs	r3, #1
 8000b92:	60a3      	str	r3, [r4, #8]
 8000b94:	bb39      	cbnz	r1, 8000be6 <_puts_r+0x9e>
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	da38      	bge.n	8000c0c <_puts_r+0xc4>
 8000b9a:	4622      	mov	r2, r4
 8000b9c:	210a      	movs	r1, #10
 8000b9e:	4628      	mov	r0, r5
 8000ba0:	f000 f848 	bl	8000c34 <__swbuf_r>
 8000ba4:	3001      	adds	r0, #1
 8000ba6:	d011      	beq.n	8000bcc <_puts_r+0x84>
 8000ba8:	250a      	movs	r5, #10
 8000baa:	e011      	b.n	8000bd0 <_puts_r+0x88>
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <_puts_r+0xd4>)
 8000bae:	429c      	cmp	r4, r3
 8000bb0:	d101      	bne.n	8000bb6 <_puts_r+0x6e>
 8000bb2:	68ac      	ldr	r4, [r5, #8]
 8000bb4:	e7da      	b.n	8000b6c <_puts_r+0x24>
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <_puts_r+0xd8>)
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	bf08      	it	eq
 8000bbc:	68ec      	ldreq	r4, [r5, #12]
 8000bbe:	e7d5      	b.n	8000b6c <_puts_r+0x24>
 8000bc0:	4621      	mov	r1, r4
 8000bc2:	4628      	mov	r0, r5
 8000bc4:	f000 f888 	bl	8000cd8 <__swsetup_r>
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	d0dd      	beq.n	8000b88 <_puts_r+0x40>
 8000bcc:	f04f 35ff 	mov.w	r5, #4294967295
 8000bd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000bd2:	07da      	lsls	r2, r3, #31
 8000bd4:	d405      	bmi.n	8000be2 <_puts_r+0x9a>
 8000bd6:	89a3      	ldrh	r3, [r4, #12]
 8000bd8:	059b      	lsls	r3, r3, #22
 8000bda:	d402      	bmi.n	8000be2 <_puts_r+0x9a>
 8000bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bde:	f000 fa9e 	bl	800111e <__retarget_lock_release_recursive>
 8000be2:	4628      	mov	r0, r5
 8000be4:	bd70      	pop	{r4, r5, r6, pc}
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	da04      	bge.n	8000bf4 <_puts_r+0xac>
 8000bea:	69a2      	ldr	r2, [r4, #24]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dc06      	bgt.n	8000bfe <_puts_r+0xb6>
 8000bf0:	290a      	cmp	r1, #10
 8000bf2:	d004      	beq.n	8000bfe <_puts_r+0xb6>
 8000bf4:	6823      	ldr	r3, [r4, #0]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	6022      	str	r2, [r4, #0]
 8000bfa:	7019      	strb	r1, [r3, #0]
 8000bfc:	e7c5      	b.n	8000b8a <_puts_r+0x42>
 8000bfe:	4622      	mov	r2, r4
 8000c00:	4628      	mov	r0, r5
 8000c02:	f000 f817 	bl	8000c34 <__swbuf_r>
 8000c06:	3001      	adds	r0, #1
 8000c08:	d1bf      	bne.n	8000b8a <_puts_r+0x42>
 8000c0a:	e7df      	b.n	8000bcc <_puts_r+0x84>
 8000c0c:	6823      	ldr	r3, [r4, #0]
 8000c0e:	250a      	movs	r5, #10
 8000c10:	1c5a      	adds	r2, r3, #1
 8000c12:	6022      	str	r2, [r4, #0]
 8000c14:	701d      	strb	r5, [r3, #0]
 8000c16:	e7db      	b.n	8000bd0 <_puts_r+0x88>
 8000c18:	08001590 	.word	0x08001590
 8000c1c:	080015b0 	.word	0x080015b0
 8000c20:	08001570 	.word	0x08001570

08000c24 <puts>:
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <puts+0xc>)
 8000c26:	4601      	mov	r1, r0
 8000c28:	6818      	ldr	r0, [r3, #0]
 8000c2a:	f7ff bf8d 	b.w	8000b48 <_puts_r>
 8000c2e:	bf00      	nop
 8000c30:	20000000 	.word	0x20000000

08000c34 <__swbuf_r>:
 8000c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c36:	460e      	mov	r6, r1
 8000c38:	4614      	mov	r4, r2
 8000c3a:	4605      	mov	r5, r0
 8000c3c:	b118      	cbz	r0, 8000c46 <__swbuf_r+0x12>
 8000c3e:	6983      	ldr	r3, [r0, #24]
 8000c40:	b90b      	cbnz	r3, 8000c46 <__swbuf_r+0x12>
 8000c42:	f000 f9cd 	bl	8000fe0 <__sinit>
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <__swbuf_r+0x98>)
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	d12b      	bne.n	8000ca4 <__swbuf_r+0x70>
 8000c4c:	686c      	ldr	r4, [r5, #4]
 8000c4e:	69a3      	ldr	r3, [r4, #24]
 8000c50:	60a3      	str	r3, [r4, #8]
 8000c52:	89a3      	ldrh	r3, [r4, #12]
 8000c54:	071a      	lsls	r2, r3, #28
 8000c56:	d52f      	bpl.n	8000cb8 <__swbuf_r+0x84>
 8000c58:	6923      	ldr	r3, [r4, #16]
 8000c5a:	b36b      	cbz	r3, 8000cb8 <__swbuf_r+0x84>
 8000c5c:	6923      	ldr	r3, [r4, #16]
 8000c5e:	6820      	ldr	r0, [r4, #0]
 8000c60:	1ac0      	subs	r0, r0, r3
 8000c62:	6963      	ldr	r3, [r4, #20]
 8000c64:	b2f6      	uxtb	r6, r6
 8000c66:	4283      	cmp	r3, r0
 8000c68:	4637      	mov	r7, r6
 8000c6a:	dc04      	bgt.n	8000c76 <__swbuf_r+0x42>
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f000 f922 	bl	8000eb8 <_fflush_r>
 8000c74:	bb30      	cbnz	r0, 8000cc4 <__swbuf_r+0x90>
 8000c76:	68a3      	ldr	r3, [r4, #8]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	60a3      	str	r3, [r4, #8]
 8000c7c:	6823      	ldr	r3, [r4, #0]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	6022      	str	r2, [r4, #0]
 8000c82:	701e      	strb	r6, [r3, #0]
 8000c84:	6963      	ldr	r3, [r4, #20]
 8000c86:	3001      	adds	r0, #1
 8000c88:	4283      	cmp	r3, r0
 8000c8a:	d004      	beq.n	8000c96 <__swbuf_r+0x62>
 8000c8c:	89a3      	ldrh	r3, [r4, #12]
 8000c8e:	07db      	lsls	r3, r3, #31
 8000c90:	d506      	bpl.n	8000ca0 <__swbuf_r+0x6c>
 8000c92:	2e0a      	cmp	r6, #10
 8000c94:	d104      	bne.n	8000ca0 <__swbuf_r+0x6c>
 8000c96:	4621      	mov	r1, r4
 8000c98:	4628      	mov	r0, r5
 8000c9a:	f000 f90d 	bl	8000eb8 <_fflush_r>
 8000c9e:	b988      	cbnz	r0, 8000cc4 <__swbuf_r+0x90>
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <__swbuf_r+0x9c>)
 8000ca6:	429c      	cmp	r4, r3
 8000ca8:	d101      	bne.n	8000cae <__swbuf_r+0x7a>
 8000caa:	68ac      	ldr	r4, [r5, #8]
 8000cac:	e7cf      	b.n	8000c4e <__swbuf_r+0x1a>
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <__swbuf_r+0xa0>)
 8000cb0:	429c      	cmp	r4, r3
 8000cb2:	bf08      	it	eq
 8000cb4:	68ec      	ldreq	r4, [r5, #12]
 8000cb6:	e7ca      	b.n	8000c4e <__swbuf_r+0x1a>
 8000cb8:	4621      	mov	r1, r4
 8000cba:	4628      	mov	r0, r5
 8000cbc:	f000 f80c 	bl	8000cd8 <__swsetup_r>
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	d0cb      	beq.n	8000c5c <__swbuf_r+0x28>
 8000cc4:	f04f 37ff 	mov.w	r7, #4294967295
 8000cc8:	e7ea      	b.n	8000ca0 <__swbuf_r+0x6c>
 8000cca:	bf00      	nop
 8000ccc:	08001590 	.word	0x08001590
 8000cd0:	080015b0 	.word	0x080015b0
 8000cd4:	08001570 	.word	0x08001570

08000cd8 <__swsetup_r>:
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <__swsetup_r+0xcc>)
 8000cda:	b570      	push	{r4, r5, r6, lr}
 8000cdc:	681d      	ldr	r5, [r3, #0]
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460c      	mov	r4, r1
 8000ce2:	b125      	cbz	r5, 8000cee <__swsetup_r+0x16>
 8000ce4:	69ab      	ldr	r3, [r5, #24]
 8000ce6:	b913      	cbnz	r3, 8000cee <__swsetup_r+0x16>
 8000ce8:	4628      	mov	r0, r5
 8000cea:	f000 f979 	bl	8000fe0 <__sinit>
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <__swsetup_r+0xd0>)
 8000cf0:	429c      	cmp	r4, r3
 8000cf2:	d10f      	bne.n	8000d14 <__swsetup_r+0x3c>
 8000cf4:	686c      	ldr	r4, [r5, #4]
 8000cf6:	89a3      	ldrh	r3, [r4, #12]
 8000cf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000cfc:	0719      	lsls	r1, r3, #28
 8000cfe:	d42c      	bmi.n	8000d5a <__swsetup_r+0x82>
 8000d00:	06dd      	lsls	r5, r3, #27
 8000d02:	d411      	bmi.n	8000d28 <__swsetup_r+0x50>
 8000d04:	2309      	movs	r3, #9
 8000d06:	6033      	str	r3, [r6, #0]
 8000d08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000d0c:	81a3      	strh	r3, [r4, #12]
 8000d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d12:	e03e      	b.n	8000d92 <__swsetup_r+0xba>
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <__swsetup_r+0xd4>)
 8000d16:	429c      	cmp	r4, r3
 8000d18:	d101      	bne.n	8000d1e <__swsetup_r+0x46>
 8000d1a:	68ac      	ldr	r4, [r5, #8]
 8000d1c:	e7eb      	b.n	8000cf6 <__swsetup_r+0x1e>
 8000d1e:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <__swsetup_r+0xd8>)
 8000d20:	429c      	cmp	r4, r3
 8000d22:	bf08      	it	eq
 8000d24:	68ec      	ldreq	r4, [r5, #12]
 8000d26:	e7e6      	b.n	8000cf6 <__swsetup_r+0x1e>
 8000d28:	0758      	lsls	r0, r3, #29
 8000d2a:	d512      	bpl.n	8000d52 <__swsetup_r+0x7a>
 8000d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d2e:	b141      	cbz	r1, 8000d42 <__swsetup_r+0x6a>
 8000d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000d34:	4299      	cmp	r1, r3
 8000d36:	d002      	beq.n	8000d3e <__swsetup_r+0x66>
 8000d38:	4630      	mov	r0, r6
 8000d3a:	f000 fa57 	bl	80011ec <_free_r>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	6363      	str	r3, [r4, #52]	; 0x34
 8000d42:	89a3      	ldrh	r3, [r4, #12]
 8000d44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000d48:	81a3      	strh	r3, [r4, #12]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	6063      	str	r3, [r4, #4]
 8000d4e:	6923      	ldr	r3, [r4, #16]
 8000d50:	6023      	str	r3, [r4, #0]
 8000d52:	89a3      	ldrh	r3, [r4, #12]
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	81a3      	strh	r3, [r4, #12]
 8000d5a:	6923      	ldr	r3, [r4, #16]
 8000d5c:	b94b      	cbnz	r3, 8000d72 <__swsetup_r+0x9a>
 8000d5e:	89a3      	ldrh	r3, [r4, #12]
 8000d60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d68:	d003      	beq.n	8000d72 <__swsetup_r+0x9a>
 8000d6a:	4621      	mov	r1, r4
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	f000 f9fd 	bl	800116c <__smakebuf_r>
 8000d72:	89a0      	ldrh	r0, [r4, #12]
 8000d74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000d78:	f010 0301 	ands.w	r3, r0, #1
 8000d7c:	d00a      	beq.n	8000d94 <__swsetup_r+0xbc>
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60a3      	str	r3, [r4, #8]
 8000d82:	6963      	ldr	r3, [r4, #20]
 8000d84:	425b      	negs	r3, r3
 8000d86:	61a3      	str	r3, [r4, #24]
 8000d88:	6923      	ldr	r3, [r4, #16]
 8000d8a:	b943      	cbnz	r3, 8000d9e <__swsetup_r+0xc6>
 8000d8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d90:	d1ba      	bne.n	8000d08 <__swsetup_r+0x30>
 8000d92:	bd70      	pop	{r4, r5, r6, pc}
 8000d94:	0781      	lsls	r1, r0, #30
 8000d96:	bf58      	it	pl
 8000d98:	6963      	ldrpl	r3, [r4, #20]
 8000d9a:	60a3      	str	r3, [r4, #8]
 8000d9c:	e7f4      	b.n	8000d88 <__swsetup_r+0xb0>
 8000d9e:	2000      	movs	r0, #0
 8000da0:	e7f7      	b.n	8000d92 <__swsetup_r+0xba>
 8000da2:	bf00      	nop
 8000da4:	20000000 	.word	0x20000000
 8000da8:	08001590 	.word	0x08001590
 8000dac:	080015b0 	.word	0x080015b0
 8000db0:	08001570 	.word	0x08001570

08000db4 <__sflush_r>:
 8000db4:	898a      	ldrh	r2, [r1, #12]
 8000db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db8:	4605      	mov	r5, r0
 8000dba:	0710      	lsls	r0, r2, #28
 8000dbc:	460c      	mov	r4, r1
 8000dbe:	d457      	bmi.n	8000e70 <__sflush_r+0xbc>
 8000dc0:	684b      	ldr	r3, [r1, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	dc04      	bgt.n	8000dd0 <__sflush_r+0x1c>
 8000dc6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	dc01      	bgt.n	8000dd0 <__sflush_r+0x1c>
 8000dcc:	2000      	movs	r0, #0
 8000dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0fa      	beq.n	8000dcc <__sflush_r+0x18>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000ddc:	682f      	ldr	r7, [r5, #0]
 8000dde:	602b      	str	r3, [r5, #0]
 8000de0:	d032      	beq.n	8000e48 <__sflush_r+0x94>
 8000de2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000de4:	89a3      	ldrh	r3, [r4, #12]
 8000de6:	075a      	lsls	r2, r3, #29
 8000de8:	d505      	bpl.n	8000df6 <__sflush_r+0x42>
 8000dea:	6863      	ldr	r3, [r4, #4]
 8000dec:	1ac0      	subs	r0, r0, r3
 8000dee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000df0:	b10b      	cbz	r3, 8000df6 <__sflush_r+0x42>
 8000df2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000df4:	1ac0      	subs	r0, r0, r3
 8000df6:	2300      	movs	r3, #0
 8000df8:	4602      	mov	r2, r0
 8000dfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000dfc:	6a21      	ldr	r1, [r4, #32]
 8000dfe:	4628      	mov	r0, r5
 8000e00:	47b0      	blx	r6
 8000e02:	1c43      	adds	r3, r0, #1
 8000e04:	89a3      	ldrh	r3, [r4, #12]
 8000e06:	d106      	bne.n	8000e16 <__sflush_r+0x62>
 8000e08:	6829      	ldr	r1, [r5, #0]
 8000e0a:	291d      	cmp	r1, #29
 8000e0c:	d82c      	bhi.n	8000e68 <__sflush_r+0xb4>
 8000e0e:	4a29      	ldr	r2, [pc, #164]	; (8000eb4 <__sflush_r+0x100>)
 8000e10:	40ca      	lsrs	r2, r1
 8000e12:	07d6      	lsls	r6, r2, #31
 8000e14:	d528      	bpl.n	8000e68 <__sflush_r+0xb4>
 8000e16:	2200      	movs	r2, #0
 8000e18:	6062      	str	r2, [r4, #4]
 8000e1a:	04d9      	lsls	r1, r3, #19
 8000e1c:	6922      	ldr	r2, [r4, #16]
 8000e1e:	6022      	str	r2, [r4, #0]
 8000e20:	d504      	bpl.n	8000e2c <__sflush_r+0x78>
 8000e22:	1c42      	adds	r2, r0, #1
 8000e24:	d101      	bne.n	8000e2a <__sflush_r+0x76>
 8000e26:	682b      	ldr	r3, [r5, #0]
 8000e28:	b903      	cbnz	r3, 8000e2c <__sflush_r+0x78>
 8000e2a:	6560      	str	r0, [r4, #84]	; 0x54
 8000e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e2e:	602f      	str	r7, [r5, #0]
 8000e30:	2900      	cmp	r1, #0
 8000e32:	d0cb      	beq.n	8000dcc <__sflush_r+0x18>
 8000e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	d002      	beq.n	8000e42 <__sflush_r+0x8e>
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	f000 f9d5 	bl	80011ec <_free_r>
 8000e42:	2000      	movs	r0, #0
 8000e44:	6360      	str	r0, [r4, #52]	; 0x34
 8000e46:	e7c2      	b.n	8000dce <__sflush_r+0x1a>
 8000e48:	6a21      	ldr	r1, [r4, #32]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	47b0      	blx	r6
 8000e50:	1c41      	adds	r1, r0, #1
 8000e52:	d1c7      	bne.n	8000de4 <__sflush_r+0x30>
 8000e54:	682b      	ldr	r3, [r5, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0c4      	beq.n	8000de4 <__sflush_r+0x30>
 8000e5a:	2b1d      	cmp	r3, #29
 8000e5c:	d001      	beq.n	8000e62 <__sflush_r+0xae>
 8000e5e:	2b16      	cmp	r3, #22
 8000e60:	d101      	bne.n	8000e66 <__sflush_r+0xb2>
 8000e62:	602f      	str	r7, [r5, #0]
 8000e64:	e7b2      	b.n	8000dcc <__sflush_r+0x18>
 8000e66:	89a3      	ldrh	r3, [r4, #12]
 8000e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e6c:	81a3      	strh	r3, [r4, #12]
 8000e6e:	e7ae      	b.n	8000dce <__sflush_r+0x1a>
 8000e70:	690f      	ldr	r7, [r1, #16]
 8000e72:	2f00      	cmp	r7, #0
 8000e74:	d0aa      	beq.n	8000dcc <__sflush_r+0x18>
 8000e76:	0793      	lsls	r3, r2, #30
 8000e78:	680e      	ldr	r6, [r1, #0]
 8000e7a:	bf08      	it	eq
 8000e7c:	694b      	ldreq	r3, [r1, #20]
 8000e7e:	600f      	str	r7, [r1, #0]
 8000e80:	bf18      	it	ne
 8000e82:	2300      	movne	r3, #0
 8000e84:	1bf6      	subs	r6, r6, r7
 8000e86:	608b      	str	r3, [r1, #8]
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	dd9f      	ble.n	8000dcc <__sflush_r+0x18>
 8000e8c:	6a21      	ldr	r1, [r4, #32]
 8000e8e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000e92:	4633      	mov	r3, r6
 8000e94:	463a      	mov	r2, r7
 8000e96:	4628      	mov	r0, r5
 8000e98:	47e0      	blx	ip
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	dc06      	bgt.n	8000eac <__sflush_r+0xf8>
 8000e9e:	89a3      	ldrh	r3, [r4, #12]
 8000ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea4:	81a3      	strh	r3, [r4, #12]
 8000ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eaa:	e790      	b.n	8000dce <__sflush_r+0x1a>
 8000eac:	4407      	add	r7, r0
 8000eae:	1a36      	subs	r6, r6, r0
 8000eb0:	e7ea      	b.n	8000e88 <__sflush_r+0xd4>
 8000eb2:	bf00      	nop
 8000eb4:	20400001 	.word	0x20400001

08000eb8 <_fflush_r>:
 8000eb8:	b538      	push	{r3, r4, r5, lr}
 8000eba:	690b      	ldr	r3, [r1, #16]
 8000ebc:	4605      	mov	r5, r0
 8000ebe:	460c      	mov	r4, r1
 8000ec0:	b913      	cbnz	r3, 8000ec8 <_fflush_r+0x10>
 8000ec2:	2500      	movs	r5, #0
 8000ec4:	4628      	mov	r0, r5
 8000ec6:	bd38      	pop	{r3, r4, r5, pc}
 8000ec8:	b118      	cbz	r0, 8000ed2 <_fflush_r+0x1a>
 8000eca:	6983      	ldr	r3, [r0, #24]
 8000ecc:	b90b      	cbnz	r3, 8000ed2 <_fflush_r+0x1a>
 8000ece:	f000 f887 	bl	8000fe0 <__sinit>
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <_fflush_r+0x6c>)
 8000ed4:	429c      	cmp	r4, r3
 8000ed6:	d11b      	bne.n	8000f10 <_fflush_r+0x58>
 8000ed8:	686c      	ldr	r4, [r5, #4]
 8000eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0ef      	beq.n	8000ec2 <_fflush_r+0xa>
 8000ee2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000ee4:	07d0      	lsls	r0, r2, #31
 8000ee6:	d404      	bmi.n	8000ef2 <_fflush_r+0x3a>
 8000ee8:	0599      	lsls	r1, r3, #22
 8000eea:	d402      	bmi.n	8000ef2 <_fflush_r+0x3a>
 8000eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000eee:	f000 f915 	bl	800111c <__retarget_lock_acquire_recursive>
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	4621      	mov	r1, r4
 8000ef6:	f7ff ff5d 	bl	8000db4 <__sflush_r>
 8000efa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000efc:	07da      	lsls	r2, r3, #31
 8000efe:	4605      	mov	r5, r0
 8000f00:	d4e0      	bmi.n	8000ec4 <_fflush_r+0xc>
 8000f02:	89a3      	ldrh	r3, [r4, #12]
 8000f04:	059b      	lsls	r3, r3, #22
 8000f06:	d4dd      	bmi.n	8000ec4 <_fflush_r+0xc>
 8000f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000f0a:	f000 f908 	bl	800111e <__retarget_lock_release_recursive>
 8000f0e:	e7d9      	b.n	8000ec4 <_fflush_r+0xc>
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <_fflush_r+0x70>)
 8000f12:	429c      	cmp	r4, r3
 8000f14:	d101      	bne.n	8000f1a <_fflush_r+0x62>
 8000f16:	68ac      	ldr	r4, [r5, #8]
 8000f18:	e7df      	b.n	8000eda <_fflush_r+0x22>
 8000f1a:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <_fflush_r+0x74>)
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	bf08      	it	eq
 8000f20:	68ec      	ldreq	r4, [r5, #12]
 8000f22:	e7da      	b.n	8000eda <_fflush_r+0x22>
 8000f24:	08001590 	.word	0x08001590
 8000f28:	080015b0 	.word	0x080015b0
 8000f2c:	08001570 	.word	0x08001570

08000f30 <std>:
 8000f30:	2300      	movs	r3, #0
 8000f32:	b510      	push	{r4, lr}
 8000f34:	4604      	mov	r4, r0
 8000f36:	e9c0 3300 	strd	r3, r3, [r0]
 8000f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000f3e:	6083      	str	r3, [r0, #8]
 8000f40:	8181      	strh	r1, [r0, #12]
 8000f42:	6643      	str	r3, [r0, #100]	; 0x64
 8000f44:	81c2      	strh	r2, [r0, #14]
 8000f46:	6183      	str	r3, [r0, #24]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	305c      	adds	r0, #92	; 0x5c
 8000f4e:	f7ff fdf3 	bl	8000b38 <memset>
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <std+0x38>)
 8000f54:	6263      	str	r3, [r4, #36]	; 0x24
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <std+0x3c>)
 8000f58:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <std+0x40>)
 8000f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <std+0x44>)
 8000f60:	6224      	str	r4, [r4, #32]
 8000f62:	6323      	str	r3, [r4, #48]	; 0x30
 8000f64:	bd10      	pop	{r4, pc}
 8000f66:	bf00      	nop
 8000f68:	080013c9 	.word	0x080013c9
 8000f6c:	080013eb 	.word	0x080013eb
 8000f70:	08001423 	.word	0x08001423
 8000f74:	08001447 	.word	0x08001447

08000f78 <_cleanup_r>:
 8000f78:	4901      	ldr	r1, [pc, #4]	; (8000f80 <_cleanup_r+0x8>)
 8000f7a:	f000 b8af 	b.w	80010dc <_fwalk_reent>
 8000f7e:	bf00      	nop
 8000f80:	08000eb9 	.word	0x08000eb9

08000f84 <__sfmoreglue>:
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	2268      	movs	r2, #104	; 0x68
 8000f88:	1e4d      	subs	r5, r1, #1
 8000f8a:	4355      	muls	r5, r2
 8000f8c:	460e      	mov	r6, r1
 8000f8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000f92:	f000 f995 	bl	80012c0 <_malloc_r>
 8000f96:	4604      	mov	r4, r0
 8000f98:	b140      	cbz	r0, 8000fac <__sfmoreglue+0x28>
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	e9c0 1600 	strd	r1, r6, [r0]
 8000fa0:	300c      	adds	r0, #12
 8000fa2:	60a0      	str	r0, [r4, #8]
 8000fa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000fa8:	f7ff fdc6 	bl	8000b38 <memset>
 8000fac:	4620      	mov	r0, r4
 8000fae:	bd70      	pop	{r4, r5, r6, pc}

08000fb0 <__sfp_lock_acquire>:
 8000fb0:	4801      	ldr	r0, [pc, #4]	; (8000fb8 <__sfp_lock_acquire+0x8>)
 8000fb2:	f000 b8b3 	b.w	800111c <__retarget_lock_acquire_recursive>
 8000fb6:	bf00      	nop
 8000fb8:	20000085 	.word	0x20000085

08000fbc <__sfp_lock_release>:
 8000fbc:	4801      	ldr	r0, [pc, #4]	; (8000fc4 <__sfp_lock_release+0x8>)
 8000fbe:	f000 b8ae 	b.w	800111e <__retarget_lock_release_recursive>
 8000fc2:	bf00      	nop
 8000fc4:	20000085 	.word	0x20000085

08000fc8 <__sinit_lock_acquire>:
 8000fc8:	4801      	ldr	r0, [pc, #4]	; (8000fd0 <__sinit_lock_acquire+0x8>)
 8000fca:	f000 b8a7 	b.w	800111c <__retarget_lock_acquire_recursive>
 8000fce:	bf00      	nop
 8000fd0:	20000086 	.word	0x20000086

08000fd4 <__sinit_lock_release>:
 8000fd4:	4801      	ldr	r0, [pc, #4]	; (8000fdc <__sinit_lock_release+0x8>)
 8000fd6:	f000 b8a2 	b.w	800111e <__retarget_lock_release_recursive>
 8000fda:	bf00      	nop
 8000fdc:	20000086 	.word	0x20000086

08000fe0 <__sinit>:
 8000fe0:	b510      	push	{r4, lr}
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	f7ff fff0 	bl	8000fc8 <__sinit_lock_acquire>
 8000fe8:	69a3      	ldr	r3, [r4, #24]
 8000fea:	b11b      	cbz	r3, 8000ff4 <__sinit+0x14>
 8000fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ff0:	f7ff bff0 	b.w	8000fd4 <__sinit_lock_release>
 8000ff4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ff8:	6523      	str	r3, [r4, #80]	; 0x50
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <__sinit+0x68>)
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <__sinit+0x6c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	62a2      	str	r2, [r4, #40]	; 0x28
 8001002:	42a3      	cmp	r3, r4
 8001004:	bf04      	itt	eq
 8001006:	2301      	moveq	r3, #1
 8001008:	61a3      	streq	r3, [r4, #24]
 800100a:	4620      	mov	r0, r4
 800100c:	f000 f820 	bl	8001050 <__sfp>
 8001010:	6060      	str	r0, [r4, #4]
 8001012:	4620      	mov	r0, r4
 8001014:	f000 f81c 	bl	8001050 <__sfp>
 8001018:	60a0      	str	r0, [r4, #8]
 800101a:	4620      	mov	r0, r4
 800101c:	f000 f818 	bl	8001050 <__sfp>
 8001020:	2200      	movs	r2, #0
 8001022:	60e0      	str	r0, [r4, #12]
 8001024:	2104      	movs	r1, #4
 8001026:	6860      	ldr	r0, [r4, #4]
 8001028:	f7ff ff82 	bl	8000f30 <std>
 800102c:	68a0      	ldr	r0, [r4, #8]
 800102e:	2201      	movs	r2, #1
 8001030:	2109      	movs	r1, #9
 8001032:	f7ff ff7d 	bl	8000f30 <std>
 8001036:	68e0      	ldr	r0, [r4, #12]
 8001038:	2202      	movs	r2, #2
 800103a:	2112      	movs	r1, #18
 800103c:	f7ff ff78 	bl	8000f30 <std>
 8001040:	2301      	movs	r3, #1
 8001042:	61a3      	str	r3, [r4, #24]
 8001044:	e7d2      	b.n	8000fec <__sinit+0xc>
 8001046:	bf00      	nop
 8001048:	0800156c 	.word	0x0800156c
 800104c:	08000f79 	.word	0x08000f79

08001050 <__sfp>:
 8001050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001052:	4607      	mov	r7, r0
 8001054:	f7ff ffac 	bl	8000fb0 <__sfp_lock_acquire>
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <__sfp+0x84>)
 800105a:	681e      	ldr	r6, [r3, #0]
 800105c:	69b3      	ldr	r3, [r6, #24]
 800105e:	b913      	cbnz	r3, 8001066 <__sfp+0x16>
 8001060:	4630      	mov	r0, r6
 8001062:	f7ff ffbd 	bl	8000fe0 <__sinit>
 8001066:	3648      	adds	r6, #72	; 0x48
 8001068:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800106c:	3b01      	subs	r3, #1
 800106e:	d503      	bpl.n	8001078 <__sfp+0x28>
 8001070:	6833      	ldr	r3, [r6, #0]
 8001072:	b30b      	cbz	r3, 80010b8 <__sfp+0x68>
 8001074:	6836      	ldr	r6, [r6, #0]
 8001076:	e7f7      	b.n	8001068 <__sfp+0x18>
 8001078:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800107c:	b9d5      	cbnz	r5, 80010b4 <__sfp+0x64>
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <__sfp+0x88>)
 8001080:	60e3      	str	r3, [r4, #12]
 8001082:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001086:	6665      	str	r5, [r4, #100]	; 0x64
 8001088:	f000 f847 	bl	800111a <__retarget_lock_init_recursive>
 800108c:	f7ff ff96 	bl	8000fbc <__sfp_lock_release>
 8001090:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001094:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001098:	6025      	str	r5, [r4, #0]
 800109a:	61a5      	str	r5, [r4, #24]
 800109c:	2208      	movs	r2, #8
 800109e:	4629      	mov	r1, r5
 80010a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80010a4:	f7ff fd48 	bl	8000b38 <memset>
 80010a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80010ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80010b0:	4620      	mov	r0, r4
 80010b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010b4:	3468      	adds	r4, #104	; 0x68
 80010b6:	e7d9      	b.n	800106c <__sfp+0x1c>
 80010b8:	2104      	movs	r1, #4
 80010ba:	4638      	mov	r0, r7
 80010bc:	f7ff ff62 	bl	8000f84 <__sfmoreglue>
 80010c0:	4604      	mov	r4, r0
 80010c2:	6030      	str	r0, [r6, #0]
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d1d5      	bne.n	8001074 <__sfp+0x24>
 80010c8:	f7ff ff78 	bl	8000fbc <__sfp_lock_release>
 80010cc:	230c      	movs	r3, #12
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	e7ee      	b.n	80010b0 <__sfp+0x60>
 80010d2:	bf00      	nop
 80010d4:	0800156c 	.word	0x0800156c
 80010d8:	ffff0001 	.word	0xffff0001

080010dc <_fwalk_reent>:
 80010dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010e0:	4606      	mov	r6, r0
 80010e2:	4688      	mov	r8, r1
 80010e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80010e8:	2700      	movs	r7, #0
 80010ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80010ee:	f1b9 0901 	subs.w	r9, r9, #1
 80010f2:	d505      	bpl.n	8001100 <_fwalk_reent+0x24>
 80010f4:	6824      	ldr	r4, [r4, #0]
 80010f6:	2c00      	cmp	r4, #0
 80010f8:	d1f7      	bne.n	80010ea <_fwalk_reent+0xe>
 80010fa:	4638      	mov	r0, r7
 80010fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001100:	89ab      	ldrh	r3, [r5, #12]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d907      	bls.n	8001116 <_fwalk_reent+0x3a>
 8001106:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800110a:	3301      	adds	r3, #1
 800110c:	d003      	beq.n	8001116 <_fwalk_reent+0x3a>
 800110e:	4629      	mov	r1, r5
 8001110:	4630      	mov	r0, r6
 8001112:	47c0      	blx	r8
 8001114:	4307      	orrs	r7, r0
 8001116:	3568      	adds	r5, #104	; 0x68
 8001118:	e7e9      	b.n	80010ee <_fwalk_reent+0x12>

0800111a <__retarget_lock_init_recursive>:
 800111a:	4770      	bx	lr

0800111c <__retarget_lock_acquire_recursive>:
 800111c:	4770      	bx	lr

0800111e <__retarget_lock_release_recursive>:
 800111e:	4770      	bx	lr

08001120 <__swhatbuf_r>:
 8001120:	b570      	push	{r4, r5, r6, lr}
 8001122:	460e      	mov	r6, r1
 8001124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001128:	2900      	cmp	r1, #0
 800112a:	b096      	sub	sp, #88	; 0x58
 800112c:	4614      	mov	r4, r2
 800112e:	461d      	mov	r5, r3
 8001130:	da08      	bge.n	8001144 <__swhatbuf_r+0x24>
 8001132:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001136:	2200      	movs	r2, #0
 8001138:	602a      	str	r2, [r5, #0]
 800113a:	061a      	lsls	r2, r3, #24
 800113c:	d410      	bmi.n	8001160 <__swhatbuf_r+0x40>
 800113e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001142:	e00e      	b.n	8001162 <__swhatbuf_r+0x42>
 8001144:	466a      	mov	r2, sp
 8001146:	f000 f9a5 	bl	8001494 <_fstat_r>
 800114a:	2800      	cmp	r0, #0
 800114c:	dbf1      	blt.n	8001132 <__swhatbuf_r+0x12>
 800114e:	9a01      	ldr	r2, [sp, #4]
 8001150:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001154:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001158:	425a      	negs	r2, r3
 800115a:	415a      	adcs	r2, r3
 800115c:	602a      	str	r2, [r5, #0]
 800115e:	e7ee      	b.n	800113e <__swhatbuf_r+0x1e>
 8001160:	2340      	movs	r3, #64	; 0x40
 8001162:	2000      	movs	r0, #0
 8001164:	6023      	str	r3, [r4, #0]
 8001166:	b016      	add	sp, #88	; 0x58
 8001168:	bd70      	pop	{r4, r5, r6, pc}
	...

0800116c <__smakebuf_r>:
 800116c:	898b      	ldrh	r3, [r1, #12]
 800116e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001170:	079d      	lsls	r5, r3, #30
 8001172:	4606      	mov	r6, r0
 8001174:	460c      	mov	r4, r1
 8001176:	d507      	bpl.n	8001188 <__smakebuf_r+0x1c>
 8001178:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800117c:	6023      	str	r3, [r4, #0]
 800117e:	6123      	str	r3, [r4, #16]
 8001180:	2301      	movs	r3, #1
 8001182:	6163      	str	r3, [r4, #20]
 8001184:	b002      	add	sp, #8
 8001186:	bd70      	pop	{r4, r5, r6, pc}
 8001188:	ab01      	add	r3, sp, #4
 800118a:	466a      	mov	r2, sp
 800118c:	f7ff ffc8 	bl	8001120 <__swhatbuf_r>
 8001190:	9900      	ldr	r1, [sp, #0]
 8001192:	4605      	mov	r5, r0
 8001194:	4630      	mov	r0, r6
 8001196:	f000 f893 	bl	80012c0 <_malloc_r>
 800119a:	b948      	cbnz	r0, 80011b0 <__smakebuf_r+0x44>
 800119c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011a0:	059a      	lsls	r2, r3, #22
 80011a2:	d4ef      	bmi.n	8001184 <__smakebuf_r+0x18>
 80011a4:	f023 0303 	bic.w	r3, r3, #3
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	81a3      	strh	r3, [r4, #12]
 80011ae:	e7e3      	b.n	8001178 <__smakebuf_r+0xc>
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <__smakebuf_r+0x7c>)
 80011b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80011b4:	89a3      	ldrh	r3, [r4, #12]
 80011b6:	6020      	str	r0, [r4, #0]
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	81a3      	strh	r3, [r4, #12]
 80011be:	9b00      	ldr	r3, [sp, #0]
 80011c0:	6163      	str	r3, [r4, #20]
 80011c2:	9b01      	ldr	r3, [sp, #4]
 80011c4:	6120      	str	r0, [r4, #16]
 80011c6:	b15b      	cbz	r3, 80011e0 <__smakebuf_r+0x74>
 80011c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011cc:	4630      	mov	r0, r6
 80011ce:	f000 f973 	bl	80014b8 <_isatty_r>
 80011d2:	b128      	cbz	r0, 80011e0 <__smakebuf_r+0x74>
 80011d4:	89a3      	ldrh	r3, [r4, #12]
 80011d6:	f023 0303 	bic.w	r3, r3, #3
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	81a3      	strh	r3, [r4, #12]
 80011e0:	89a0      	ldrh	r0, [r4, #12]
 80011e2:	4305      	orrs	r5, r0
 80011e4:	81a5      	strh	r5, [r4, #12]
 80011e6:	e7cd      	b.n	8001184 <__smakebuf_r+0x18>
 80011e8:	08000f79 	.word	0x08000f79

080011ec <_free_r>:
 80011ec:	b538      	push	{r3, r4, r5, lr}
 80011ee:	4605      	mov	r5, r0
 80011f0:	2900      	cmp	r1, #0
 80011f2:	d041      	beq.n	8001278 <_free_r+0x8c>
 80011f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011f8:	1f0c      	subs	r4, r1, #4
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bfb8      	it	lt
 80011fe:	18e4      	addlt	r4, r4, r3
 8001200:	f000 f97c 	bl	80014fc <__malloc_lock>
 8001204:	4a1d      	ldr	r2, [pc, #116]	; (800127c <_free_r+0x90>)
 8001206:	6813      	ldr	r3, [r2, #0]
 8001208:	b933      	cbnz	r3, 8001218 <_free_r+0x2c>
 800120a:	6063      	str	r3, [r4, #4]
 800120c:	6014      	str	r4, [r2, #0]
 800120e:	4628      	mov	r0, r5
 8001210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001214:	f000 b978 	b.w	8001508 <__malloc_unlock>
 8001218:	42a3      	cmp	r3, r4
 800121a:	d908      	bls.n	800122e <_free_r+0x42>
 800121c:	6820      	ldr	r0, [r4, #0]
 800121e:	1821      	adds	r1, r4, r0
 8001220:	428b      	cmp	r3, r1
 8001222:	bf01      	itttt	eq
 8001224:	6819      	ldreq	r1, [r3, #0]
 8001226:	685b      	ldreq	r3, [r3, #4]
 8001228:	1809      	addeq	r1, r1, r0
 800122a:	6021      	streq	r1, [r4, #0]
 800122c:	e7ed      	b.n	800120a <_free_r+0x1e>
 800122e:	461a      	mov	r2, r3
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	b10b      	cbz	r3, 8001238 <_free_r+0x4c>
 8001234:	42a3      	cmp	r3, r4
 8001236:	d9fa      	bls.n	800122e <_free_r+0x42>
 8001238:	6811      	ldr	r1, [r2, #0]
 800123a:	1850      	adds	r0, r2, r1
 800123c:	42a0      	cmp	r0, r4
 800123e:	d10b      	bne.n	8001258 <_free_r+0x6c>
 8001240:	6820      	ldr	r0, [r4, #0]
 8001242:	4401      	add	r1, r0
 8001244:	1850      	adds	r0, r2, r1
 8001246:	4283      	cmp	r3, r0
 8001248:	6011      	str	r1, [r2, #0]
 800124a:	d1e0      	bne.n	800120e <_free_r+0x22>
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	6053      	str	r3, [r2, #4]
 8001252:	4401      	add	r1, r0
 8001254:	6011      	str	r1, [r2, #0]
 8001256:	e7da      	b.n	800120e <_free_r+0x22>
 8001258:	d902      	bls.n	8001260 <_free_r+0x74>
 800125a:	230c      	movs	r3, #12
 800125c:	602b      	str	r3, [r5, #0]
 800125e:	e7d6      	b.n	800120e <_free_r+0x22>
 8001260:	6820      	ldr	r0, [r4, #0]
 8001262:	1821      	adds	r1, r4, r0
 8001264:	428b      	cmp	r3, r1
 8001266:	bf04      	itt	eq
 8001268:	6819      	ldreq	r1, [r3, #0]
 800126a:	685b      	ldreq	r3, [r3, #4]
 800126c:	6063      	str	r3, [r4, #4]
 800126e:	bf04      	itt	eq
 8001270:	1809      	addeq	r1, r1, r0
 8001272:	6021      	streq	r1, [r4, #0]
 8001274:	6054      	str	r4, [r2, #4]
 8001276:	e7ca      	b.n	800120e <_free_r+0x22>
 8001278:	bd38      	pop	{r3, r4, r5, pc}
 800127a:	bf00      	nop
 800127c:	20000088 	.word	0x20000088

08001280 <sbrk_aligned>:
 8001280:	b570      	push	{r4, r5, r6, lr}
 8001282:	4e0e      	ldr	r6, [pc, #56]	; (80012bc <sbrk_aligned+0x3c>)
 8001284:	460c      	mov	r4, r1
 8001286:	6831      	ldr	r1, [r6, #0]
 8001288:	4605      	mov	r5, r0
 800128a:	b911      	cbnz	r1, 8001292 <sbrk_aligned+0x12>
 800128c:	f000 f88c 	bl	80013a8 <_sbrk_r>
 8001290:	6030      	str	r0, [r6, #0]
 8001292:	4621      	mov	r1, r4
 8001294:	4628      	mov	r0, r5
 8001296:	f000 f887 	bl	80013a8 <_sbrk_r>
 800129a:	1c43      	adds	r3, r0, #1
 800129c:	d00a      	beq.n	80012b4 <sbrk_aligned+0x34>
 800129e:	1cc4      	adds	r4, r0, #3
 80012a0:	f024 0403 	bic.w	r4, r4, #3
 80012a4:	42a0      	cmp	r0, r4
 80012a6:	d007      	beq.n	80012b8 <sbrk_aligned+0x38>
 80012a8:	1a21      	subs	r1, r4, r0
 80012aa:	4628      	mov	r0, r5
 80012ac:	f000 f87c 	bl	80013a8 <_sbrk_r>
 80012b0:	3001      	adds	r0, #1
 80012b2:	d101      	bne.n	80012b8 <sbrk_aligned+0x38>
 80012b4:	f04f 34ff 	mov.w	r4, #4294967295
 80012b8:	4620      	mov	r0, r4
 80012ba:	bd70      	pop	{r4, r5, r6, pc}
 80012bc:	2000008c 	.word	0x2000008c

080012c0 <_malloc_r>:
 80012c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012c4:	1ccd      	adds	r5, r1, #3
 80012c6:	f025 0503 	bic.w	r5, r5, #3
 80012ca:	3508      	adds	r5, #8
 80012cc:	2d0c      	cmp	r5, #12
 80012ce:	bf38      	it	cc
 80012d0:	250c      	movcc	r5, #12
 80012d2:	2d00      	cmp	r5, #0
 80012d4:	4607      	mov	r7, r0
 80012d6:	db01      	blt.n	80012dc <_malloc_r+0x1c>
 80012d8:	42a9      	cmp	r1, r5
 80012da:	d905      	bls.n	80012e8 <_malloc_r+0x28>
 80012dc:	230c      	movs	r3, #12
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	2600      	movs	r6, #0
 80012e2:	4630      	mov	r0, r6
 80012e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012e8:	4e2e      	ldr	r6, [pc, #184]	; (80013a4 <_malloc_r+0xe4>)
 80012ea:	f000 f907 	bl	80014fc <__malloc_lock>
 80012ee:	6833      	ldr	r3, [r6, #0]
 80012f0:	461c      	mov	r4, r3
 80012f2:	bb34      	cbnz	r4, 8001342 <_malloc_r+0x82>
 80012f4:	4629      	mov	r1, r5
 80012f6:	4638      	mov	r0, r7
 80012f8:	f7ff ffc2 	bl	8001280 <sbrk_aligned>
 80012fc:	1c43      	adds	r3, r0, #1
 80012fe:	4604      	mov	r4, r0
 8001300:	d14d      	bne.n	800139e <_malloc_r+0xde>
 8001302:	6834      	ldr	r4, [r6, #0]
 8001304:	4626      	mov	r6, r4
 8001306:	2e00      	cmp	r6, #0
 8001308:	d140      	bne.n	800138c <_malloc_r+0xcc>
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	4631      	mov	r1, r6
 800130e:	4638      	mov	r0, r7
 8001310:	eb04 0803 	add.w	r8, r4, r3
 8001314:	f000 f848 	bl	80013a8 <_sbrk_r>
 8001318:	4580      	cmp	r8, r0
 800131a:	d13a      	bne.n	8001392 <_malloc_r+0xd2>
 800131c:	6821      	ldr	r1, [r4, #0]
 800131e:	3503      	adds	r5, #3
 8001320:	1a6d      	subs	r5, r5, r1
 8001322:	f025 0503 	bic.w	r5, r5, #3
 8001326:	3508      	adds	r5, #8
 8001328:	2d0c      	cmp	r5, #12
 800132a:	bf38      	it	cc
 800132c:	250c      	movcc	r5, #12
 800132e:	4629      	mov	r1, r5
 8001330:	4638      	mov	r0, r7
 8001332:	f7ff ffa5 	bl	8001280 <sbrk_aligned>
 8001336:	3001      	adds	r0, #1
 8001338:	d02b      	beq.n	8001392 <_malloc_r+0xd2>
 800133a:	6823      	ldr	r3, [r4, #0]
 800133c:	442b      	add	r3, r5
 800133e:	6023      	str	r3, [r4, #0]
 8001340:	e00e      	b.n	8001360 <_malloc_r+0xa0>
 8001342:	6822      	ldr	r2, [r4, #0]
 8001344:	1b52      	subs	r2, r2, r5
 8001346:	d41e      	bmi.n	8001386 <_malloc_r+0xc6>
 8001348:	2a0b      	cmp	r2, #11
 800134a:	d916      	bls.n	800137a <_malloc_r+0xba>
 800134c:	1961      	adds	r1, r4, r5
 800134e:	42a3      	cmp	r3, r4
 8001350:	6025      	str	r5, [r4, #0]
 8001352:	bf18      	it	ne
 8001354:	6059      	strne	r1, [r3, #4]
 8001356:	6863      	ldr	r3, [r4, #4]
 8001358:	bf08      	it	eq
 800135a:	6031      	streq	r1, [r6, #0]
 800135c:	5162      	str	r2, [r4, r5]
 800135e:	604b      	str	r3, [r1, #4]
 8001360:	4638      	mov	r0, r7
 8001362:	f104 060b 	add.w	r6, r4, #11
 8001366:	f000 f8cf 	bl	8001508 <__malloc_unlock>
 800136a:	f026 0607 	bic.w	r6, r6, #7
 800136e:	1d23      	adds	r3, r4, #4
 8001370:	1af2      	subs	r2, r6, r3
 8001372:	d0b6      	beq.n	80012e2 <_malloc_r+0x22>
 8001374:	1b9b      	subs	r3, r3, r6
 8001376:	50a3      	str	r3, [r4, r2]
 8001378:	e7b3      	b.n	80012e2 <_malloc_r+0x22>
 800137a:	6862      	ldr	r2, [r4, #4]
 800137c:	42a3      	cmp	r3, r4
 800137e:	bf0c      	ite	eq
 8001380:	6032      	streq	r2, [r6, #0]
 8001382:	605a      	strne	r2, [r3, #4]
 8001384:	e7ec      	b.n	8001360 <_malloc_r+0xa0>
 8001386:	4623      	mov	r3, r4
 8001388:	6864      	ldr	r4, [r4, #4]
 800138a:	e7b2      	b.n	80012f2 <_malloc_r+0x32>
 800138c:	4634      	mov	r4, r6
 800138e:	6876      	ldr	r6, [r6, #4]
 8001390:	e7b9      	b.n	8001306 <_malloc_r+0x46>
 8001392:	230c      	movs	r3, #12
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	4638      	mov	r0, r7
 8001398:	f000 f8b6 	bl	8001508 <__malloc_unlock>
 800139c:	e7a1      	b.n	80012e2 <_malloc_r+0x22>
 800139e:	6025      	str	r5, [r4, #0]
 80013a0:	e7de      	b.n	8001360 <_malloc_r+0xa0>
 80013a2:	bf00      	nop
 80013a4:	20000088 	.word	0x20000088

080013a8 <_sbrk_r>:
 80013a8:	b538      	push	{r3, r4, r5, lr}
 80013aa:	4d06      	ldr	r5, [pc, #24]	; (80013c4 <_sbrk_r+0x1c>)
 80013ac:	2300      	movs	r3, #0
 80013ae:	4604      	mov	r4, r0
 80013b0:	4608      	mov	r0, r1
 80013b2:	602b      	str	r3, [r5, #0]
 80013b4:	f7ff f800 	bl	80003b8 <_sbrk>
 80013b8:	1c43      	adds	r3, r0, #1
 80013ba:	d102      	bne.n	80013c2 <_sbrk_r+0x1a>
 80013bc:	682b      	ldr	r3, [r5, #0]
 80013be:	b103      	cbz	r3, 80013c2 <_sbrk_r+0x1a>
 80013c0:	6023      	str	r3, [r4, #0]
 80013c2:	bd38      	pop	{r3, r4, r5, pc}
 80013c4:	20000090 	.word	0x20000090

080013c8 <__sread>:
 80013c8:	b510      	push	{r4, lr}
 80013ca:	460c      	mov	r4, r1
 80013cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013d0:	f000 f8a0 	bl	8001514 <_read_r>
 80013d4:	2800      	cmp	r0, #0
 80013d6:	bfab      	itete	ge
 80013d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80013da:	89a3      	ldrhlt	r3, [r4, #12]
 80013dc:	181b      	addge	r3, r3, r0
 80013de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80013e2:	bfac      	ite	ge
 80013e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80013e6:	81a3      	strhlt	r3, [r4, #12]
 80013e8:	bd10      	pop	{r4, pc}

080013ea <__swrite>:
 80013ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ee:	461f      	mov	r7, r3
 80013f0:	898b      	ldrh	r3, [r1, #12]
 80013f2:	05db      	lsls	r3, r3, #23
 80013f4:	4605      	mov	r5, r0
 80013f6:	460c      	mov	r4, r1
 80013f8:	4616      	mov	r6, r2
 80013fa:	d505      	bpl.n	8001408 <__swrite+0x1e>
 80013fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001400:	2302      	movs	r3, #2
 8001402:	2200      	movs	r2, #0
 8001404:	f000 f868 	bl	80014d8 <_lseek_r>
 8001408:	89a3      	ldrh	r3, [r4, #12]
 800140a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800140e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001412:	81a3      	strh	r3, [r4, #12]
 8001414:	4632      	mov	r2, r6
 8001416:	463b      	mov	r3, r7
 8001418:	4628      	mov	r0, r5
 800141a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800141e:	f000 b817 	b.w	8001450 <_write_r>

08001422 <__sseek>:
 8001422:	b510      	push	{r4, lr}
 8001424:	460c      	mov	r4, r1
 8001426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800142a:	f000 f855 	bl	80014d8 <_lseek_r>
 800142e:	1c43      	adds	r3, r0, #1
 8001430:	89a3      	ldrh	r3, [r4, #12]
 8001432:	bf15      	itete	ne
 8001434:	6560      	strne	r0, [r4, #84]	; 0x54
 8001436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800143a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800143e:	81a3      	strheq	r3, [r4, #12]
 8001440:	bf18      	it	ne
 8001442:	81a3      	strhne	r3, [r4, #12]
 8001444:	bd10      	pop	{r4, pc}

08001446 <__sclose>:
 8001446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800144a:	f000 b813 	b.w	8001474 <_close_r>
	...

08001450 <_write_r>:
 8001450:	b538      	push	{r3, r4, r5, lr}
 8001452:	4d07      	ldr	r5, [pc, #28]	; (8001470 <_write_r+0x20>)
 8001454:	4604      	mov	r4, r0
 8001456:	4608      	mov	r0, r1
 8001458:	4611      	mov	r1, r2
 800145a:	2200      	movs	r2, #0
 800145c:	602a      	str	r2, [r5, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	f7fe ff5d 	bl	800031e <_write>
 8001464:	1c43      	adds	r3, r0, #1
 8001466:	d102      	bne.n	800146e <_write_r+0x1e>
 8001468:	682b      	ldr	r3, [r5, #0]
 800146a:	b103      	cbz	r3, 800146e <_write_r+0x1e>
 800146c:	6023      	str	r3, [r4, #0]
 800146e:	bd38      	pop	{r3, r4, r5, pc}
 8001470:	20000090 	.word	0x20000090

08001474 <_close_r>:
 8001474:	b538      	push	{r3, r4, r5, lr}
 8001476:	4d06      	ldr	r5, [pc, #24]	; (8001490 <_close_r+0x1c>)
 8001478:	2300      	movs	r3, #0
 800147a:	4604      	mov	r4, r0
 800147c:	4608      	mov	r0, r1
 800147e:	602b      	str	r3, [r5, #0]
 8001480:	f7fe ff69 	bl	8000356 <_close>
 8001484:	1c43      	adds	r3, r0, #1
 8001486:	d102      	bne.n	800148e <_close_r+0x1a>
 8001488:	682b      	ldr	r3, [r5, #0]
 800148a:	b103      	cbz	r3, 800148e <_close_r+0x1a>
 800148c:	6023      	str	r3, [r4, #0]
 800148e:	bd38      	pop	{r3, r4, r5, pc}
 8001490:	20000090 	.word	0x20000090

08001494 <_fstat_r>:
 8001494:	b538      	push	{r3, r4, r5, lr}
 8001496:	4d07      	ldr	r5, [pc, #28]	; (80014b4 <_fstat_r+0x20>)
 8001498:	2300      	movs	r3, #0
 800149a:	4604      	mov	r4, r0
 800149c:	4608      	mov	r0, r1
 800149e:	4611      	mov	r1, r2
 80014a0:	602b      	str	r3, [r5, #0]
 80014a2:	f7fe ff63 	bl	800036c <_fstat>
 80014a6:	1c43      	adds	r3, r0, #1
 80014a8:	d102      	bne.n	80014b0 <_fstat_r+0x1c>
 80014aa:	682b      	ldr	r3, [r5, #0]
 80014ac:	b103      	cbz	r3, 80014b0 <_fstat_r+0x1c>
 80014ae:	6023      	str	r3, [r4, #0]
 80014b0:	bd38      	pop	{r3, r4, r5, pc}
 80014b2:	bf00      	nop
 80014b4:	20000090 	.word	0x20000090

080014b8 <_isatty_r>:
 80014b8:	b538      	push	{r3, r4, r5, lr}
 80014ba:	4d06      	ldr	r5, [pc, #24]	; (80014d4 <_isatty_r+0x1c>)
 80014bc:	2300      	movs	r3, #0
 80014be:	4604      	mov	r4, r0
 80014c0:	4608      	mov	r0, r1
 80014c2:	602b      	str	r3, [r5, #0]
 80014c4:	f7fe ff61 	bl	800038a <_isatty>
 80014c8:	1c43      	adds	r3, r0, #1
 80014ca:	d102      	bne.n	80014d2 <_isatty_r+0x1a>
 80014cc:	682b      	ldr	r3, [r5, #0]
 80014ce:	b103      	cbz	r3, 80014d2 <_isatty_r+0x1a>
 80014d0:	6023      	str	r3, [r4, #0]
 80014d2:	bd38      	pop	{r3, r4, r5, pc}
 80014d4:	20000090 	.word	0x20000090

080014d8 <_lseek_r>:
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	4d07      	ldr	r5, [pc, #28]	; (80014f8 <_lseek_r+0x20>)
 80014dc:	4604      	mov	r4, r0
 80014de:	4608      	mov	r0, r1
 80014e0:	4611      	mov	r1, r2
 80014e2:	2200      	movs	r2, #0
 80014e4:	602a      	str	r2, [r5, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	f7fe ff59 	bl	800039e <_lseek>
 80014ec:	1c43      	adds	r3, r0, #1
 80014ee:	d102      	bne.n	80014f6 <_lseek_r+0x1e>
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	b103      	cbz	r3, 80014f6 <_lseek_r+0x1e>
 80014f4:	6023      	str	r3, [r4, #0]
 80014f6:	bd38      	pop	{r3, r4, r5, pc}
 80014f8:	20000090 	.word	0x20000090

080014fc <__malloc_lock>:
 80014fc:	4801      	ldr	r0, [pc, #4]	; (8001504 <__malloc_lock+0x8>)
 80014fe:	f7ff be0d 	b.w	800111c <__retarget_lock_acquire_recursive>
 8001502:	bf00      	nop
 8001504:	20000084 	.word	0x20000084

08001508 <__malloc_unlock>:
 8001508:	4801      	ldr	r0, [pc, #4]	; (8001510 <__malloc_unlock+0x8>)
 800150a:	f7ff be08 	b.w	800111e <__retarget_lock_release_recursive>
 800150e:	bf00      	nop
 8001510:	20000084 	.word	0x20000084

08001514 <_read_r>:
 8001514:	b538      	push	{r3, r4, r5, lr}
 8001516:	4d07      	ldr	r5, [pc, #28]	; (8001534 <_read_r+0x20>)
 8001518:	4604      	mov	r4, r0
 800151a:	4608      	mov	r0, r1
 800151c:	4611      	mov	r1, r2
 800151e:	2200      	movs	r2, #0
 8001520:	602a      	str	r2, [r5, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	f7fe fede 	bl	80002e4 <_read>
 8001528:	1c43      	adds	r3, r0, #1
 800152a:	d102      	bne.n	8001532 <_read_r+0x1e>
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	b103      	cbz	r3, 8001532 <_read_r+0x1e>
 8001530:	6023      	str	r3, [r4, #0]
 8001532:	bd38      	pop	{r3, r4, r5, pc}
 8001534:	20000090 	.word	0x20000090

08001538 <_init>:
 8001538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153a:	bf00      	nop
 800153c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153e:	bc08      	pop	{r3}
 8001540:	469e      	mov	lr, r3
 8001542:	4770      	bx	lr

08001544 <_fini>:
 8001544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001546:	bf00      	nop
 8001548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800154a:	bc08      	pop	{r3}
 800154c:	469e      	mov	lr, r3
 800154e:	4770      	bx	lr
